// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: T20_NetMsg.proto

#include "T20_NetMsg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_T20_5fNetMsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Lession_T20_5fNetMsg_2eproto;
namespace NetMsg {
class Msg_AskRegDCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Msg_AskRegDC> _instance;
} _Msg_AskRegDC_default_instance_;
class Msg_RespRegDCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Msg_RespRegDC> _instance;
} _Msg_RespRegDC_default_instance_;
class Msg_AskLoginDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Msg_AskLogin> _instance;
} _Msg_AskLogin_default_instance_;
class Msg_RespLoginDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Msg_RespLogin> _instance;
} _Msg_RespLogin_default_instance_;
class Msg_AskLogoutDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Msg_AskLogout> _instance;
} _Msg_AskLogout_default_instance_;
class Msg_RespLogoutDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Msg_RespLogout> _instance;
} _Msg_RespLogout_default_instance_;
class Msg_MessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Msg_Message> _instance;
} _Msg_Message_default_instance_;
class LessionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Lession> _instance;
} _Lession_default_instance_;
class Msg_StartTaskDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Msg_StartTask> _instance;
} _Msg_StartTask_default_instance_;
class Msg_StopTaskDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Msg_StopTask> _instance;
} _Msg_StopTask_default_instance_;
class Msg_TaskStepInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Msg_TaskStepInfo> _instance;
} _Msg_TaskStepInfo_default_instance_;
class Msg_TaskOverDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Msg_TaskOver> _instance;
} _Msg_TaskOver_default_instance_;
class Msg_EDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Msg_E> _instance;
} _Msg_E_default_instance_;
class Msg_FDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Msg_F> _instance;
} _Msg_F_default_instance_;
class Msg_KDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Msg_K> _instance;
} _Msg_K_default_instance_;
class Msg_BDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Msg_BD> _instance;
} _Msg_BD_default_instance_;
class Msg_T_Online_DeviceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Msg_T_Online_Device> _instance;
} _Msg_T_Online_Device_default_instance_;
}  // namespace NetMsg
static void InitDefaultsscc_info_Lession_T20_5fNetMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NetMsg::_Lession_default_instance_;
    new (ptr) ::NetMsg::Lession();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NetMsg::Lession::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Lession_T20_5fNetMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Lession_T20_5fNetMsg_2eproto}, {}};

static void InitDefaultsscc_info_Msg_AskLogin_T20_5fNetMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NetMsg::_Msg_AskLogin_default_instance_;
    new (ptr) ::NetMsg::Msg_AskLogin();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NetMsg::Msg_AskLogin::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Msg_AskLogin_T20_5fNetMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Msg_AskLogin_T20_5fNetMsg_2eproto}, {}};

static void InitDefaultsscc_info_Msg_AskLogout_T20_5fNetMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NetMsg::_Msg_AskLogout_default_instance_;
    new (ptr) ::NetMsg::Msg_AskLogout();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NetMsg::Msg_AskLogout::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Msg_AskLogout_T20_5fNetMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Msg_AskLogout_T20_5fNetMsg_2eproto}, {}};

static void InitDefaultsscc_info_Msg_AskRegDC_T20_5fNetMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NetMsg::_Msg_AskRegDC_default_instance_;
    new (ptr) ::NetMsg::Msg_AskRegDC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NetMsg::Msg_AskRegDC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Msg_AskRegDC_T20_5fNetMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Msg_AskRegDC_T20_5fNetMsg_2eproto}, {}};

static void InitDefaultsscc_info_Msg_BD_T20_5fNetMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NetMsg::_Msg_BD_default_instance_;
    new (ptr) ::NetMsg::Msg_BD();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NetMsg::Msg_BD::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Msg_BD_T20_5fNetMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Msg_BD_T20_5fNetMsg_2eproto}, {}};

static void InitDefaultsscc_info_Msg_E_T20_5fNetMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NetMsg::_Msg_E_default_instance_;
    new (ptr) ::NetMsg::Msg_E();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NetMsg::Msg_E::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Msg_E_T20_5fNetMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Msg_E_T20_5fNetMsg_2eproto}, {}};

static void InitDefaultsscc_info_Msg_F_T20_5fNetMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NetMsg::_Msg_F_default_instance_;
    new (ptr) ::NetMsg::Msg_F();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NetMsg::Msg_F::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Msg_F_T20_5fNetMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Msg_F_T20_5fNetMsg_2eproto}, {}};

static void InitDefaultsscc_info_Msg_K_T20_5fNetMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NetMsg::_Msg_K_default_instance_;
    new (ptr) ::NetMsg::Msg_K();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NetMsg::Msg_K::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Msg_K_T20_5fNetMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Msg_K_T20_5fNetMsg_2eproto}, {}};

static void InitDefaultsscc_info_Msg_Message_T20_5fNetMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NetMsg::_Msg_Message_default_instance_;
    new (ptr) ::NetMsg::Msg_Message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NetMsg::Msg_Message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Msg_Message_T20_5fNetMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Msg_Message_T20_5fNetMsg_2eproto}, {}};

static void InitDefaultsscc_info_Msg_RespLogin_T20_5fNetMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NetMsg::_Msg_RespLogin_default_instance_;
    new (ptr) ::NetMsg::Msg_RespLogin();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NetMsg::Msg_RespLogin::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Msg_RespLogin_T20_5fNetMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Msg_RespLogin_T20_5fNetMsg_2eproto}, {}};

static void InitDefaultsscc_info_Msg_RespLogout_T20_5fNetMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NetMsg::_Msg_RespLogout_default_instance_;
    new (ptr) ::NetMsg::Msg_RespLogout();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NetMsg::Msg_RespLogout::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Msg_RespLogout_T20_5fNetMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Msg_RespLogout_T20_5fNetMsg_2eproto}, {}};

static void InitDefaultsscc_info_Msg_RespRegDC_T20_5fNetMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NetMsg::_Msg_RespRegDC_default_instance_;
    new (ptr) ::NetMsg::Msg_RespRegDC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NetMsg::Msg_RespRegDC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Msg_RespRegDC_T20_5fNetMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Msg_RespRegDC_T20_5fNetMsg_2eproto}, {}};

static void InitDefaultsscc_info_Msg_StartTask_T20_5fNetMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NetMsg::_Msg_StartTask_default_instance_;
    new (ptr) ::NetMsg::Msg_StartTask();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NetMsg::Msg_StartTask::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Msg_StartTask_T20_5fNetMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Msg_StartTask_T20_5fNetMsg_2eproto}, {
      &scc_info_Lession_T20_5fNetMsg_2eproto.base,}};

static void InitDefaultsscc_info_Msg_StopTask_T20_5fNetMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NetMsg::_Msg_StopTask_default_instance_;
    new (ptr) ::NetMsg::Msg_StopTask();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NetMsg::Msg_StopTask::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Msg_StopTask_T20_5fNetMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Msg_StopTask_T20_5fNetMsg_2eproto}, {}};

static void InitDefaultsscc_info_Msg_T_Online_Device_T20_5fNetMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NetMsg::_Msg_T_Online_Device_default_instance_;
    new (ptr) ::NetMsg::Msg_T_Online_Device();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NetMsg::Msg_T_Online_Device::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Msg_T_Online_Device_T20_5fNetMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Msg_T_Online_Device_T20_5fNetMsg_2eproto}, {}};

static void InitDefaultsscc_info_Msg_TaskOver_T20_5fNetMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NetMsg::_Msg_TaskOver_default_instance_;
    new (ptr) ::NetMsg::Msg_TaskOver();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NetMsg::Msg_TaskOver::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Msg_TaskOver_T20_5fNetMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Msg_TaskOver_T20_5fNetMsg_2eproto}, {}};

static void InitDefaultsscc_info_Msg_TaskStepInfo_T20_5fNetMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NetMsg::_Msg_TaskStepInfo_default_instance_;
    new (ptr) ::NetMsg::Msg_TaskStepInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NetMsg::Msg_TaskStepInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Msg_TaskStepInfo_T20_5fNetMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Msg_TaskStepInfo_T20_5fNetMsg_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_T20_5fNetMsg_2eproto[17];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_T20_5fNetMsg_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_T20_5fNetMsg_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_T20_5fNetMsg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NetMsg::Msg_AskRegDC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NetMsg::Msg_AskRegDC, id_),
  PROTOBUF_FIELD_OFFSET(::NetMsg::Msg_AskRegDC, version_),
  PROTOBUF_FIELD_OFFSET(::NetMsg::Msg_AskRegDC, dc_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NetMsg::Msg_RespRegDC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NetMsg::Msg_RespRegDC, result_),
  PROTOBUF_FIELD_OFFSET(::NetMsg::Msg_RespRegDC, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NetMsg::Msg_AskLogin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NetMsg::Msg_AskLogin, user_name_),
  PROTOBUF_FIELD_OFFSET(::NetMsg::Msg_AskLogin, password_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NetMsg::Msg_RespLogin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NetMsg::Msg_RespLogin, result_),
  PROTOBUF_FIELD_OFFSET(::NetMsg::Msg_RespLogin, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NetMsg::Msg_AskLogout, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NetMsg::Msg_AskLogout, user_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NetMsg::Msg_RespLogout, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NetMsg::Msg_RespLogout, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NetMsg::Msg_Message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NetMsg::Msg_Message, device_id_),
  PROTOBUF_FIELD_OFFSET(::NetMsg::Msg_Message, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NetMsg::Lession, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NetMsg::Msg_StartTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NetMsg::Msg_StartTask, id_),
  PROTOBUF_FIELD_OFFSET(::NetMsg::Msg_StartTask, lession_type_),
  PROTOBUF_FIELD_OFFSET(::NetMsg::Msg_StartTask, task_id_),
  PROTOBUF_FIELD_OFFSET(::NetMsg::Msg_StartTask, train_),
  PROTOBUF_FIELD_OFFSET(::NetMsg::Msg_StartTask, student_id_),
  PROTOBUF_FIELD_OFFSET(::NetMsg::Msg_StartTask, student_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NetMsg::Msg_StopTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NetMsg::Msg_StopTask, reason_),
  PROTOBUF_FIELD_OFFSET(::NetMsg::Msg_StopTask, reason_text_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NetMsg::Msg_TaskStepInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NetMsg::Msg_TaskStepInfo, step_id_),
  PROTOBUF_FIELD_OFFSET(::NetMsg::Msg_TaskStepInfo, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NetMsg::Msg_TaskOver, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NetMsg::Msg_TaskOver, reason_),
  PROTOBUF_FIELD_OFFSET(::NetMsg::Msg_TaskOver, score_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NetMsg::Msg_E, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NetMsg::Msg_E, year_),
  PROTOBUF_FIELD_OFFSET(::NetMsg::Msg_E, month_),
  PROTOBUF_FIELD_OFFSET(::NetMsg::Msg_E, day_),
  PROTOBUF_FIELD_OFFSET(::NetMsg::Msg_E, hour_),
  PROTOBUF_FIELD_OFFSET(::NetMsg::Msg_E, min_),
  PROTOBUF_FIELD_OFFSET(::NetMsg::Msg_E, sec_),
  PROTOBUF_FIELD_OFFSET(::NetMsg::Msg_E, shellnum_),
  PROTOBUF_FIELD_OFFSET(::NetMsg::Msg_E, isselfchkortesttxtsaved_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NetMsg::Msg_F, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NetMsg::Msg_F, fuzetypeselected_),
  PROTOBUF_FIELD_OFFSET(::NetMsg::Msg_F, serialnum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NetMsg::Msg_K, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NetMsg::Msg_K, order_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NetMsg::Msg_BD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NetMsg::Msg_T_Online_Device, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NetMsg::Msg_T_Online_Device, onlineflag_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::NetMsg::Msg_AskRegDC)},
  { 8, -1, sizeof(::NetMsg::Msg_RespRegDC)},
  { 15, -1, sizeof(::NetMsg::Msg_AskLogin)},
  { 22, -1, sizeof(::NetMsg::Msg_RespLogin)},
  { 29, -1, sizeof(::NetMsg::Msg_AskLogout)},
  { 35, -1, sizeof(::NetMsg::Msg_RespLogout)},
  { 41, -1, sizeof(::NetMsg::Msg_Message)},
  { 48, -1, sizeof(::NetMsg::Lession)},
  { 53, -1, sizeof(::NetMsg::Msg_StartTask)},
  { 64, -1, sizeof(::NetMsg::Msg_StopTask)},
  { 71, -1, sizeof(::NetMsg::Msg_TaskStepInfo)},
  { 78, -1, sizeof(::NetMsg::Msg_TaskOver)},
  { 85, -1, sizeof(::NetMsg::Msg_E)},
  { 98, -1, sizeof(::NetMsg::Msg_F)},
  { 105, -1, sizeof(::NetMsg::Msg_K)},
  { 111, -1, sizeof(::NetMsg::Msg_BD)},
  { 116, -1, sizeof(::NetMsg::Msg_T_Online_Device)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NetMsg::_Msg_AskRegDC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NetMsg::_Msg_RespRegDC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NetMsg::_Msg_AskLogin_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NetMsg::_Msg_RespLogin_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NetMsg::_Msg_AskLogout_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NetMsg::_Msg_RespLogout_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NetMsg::_Msg_Message_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NetMsg::_Lession_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NetMsg::_Msg_StartTask_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NetMsg::_Msg_StopTask_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NetMsg::_Msg_TaskStepInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NetMsg::_Msg_TaskOver_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NetMsg::_Msg_E_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NetMsg::_Msg_F_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NetMsg::_Msg_K_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NetMsg::_Msg_BD_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NetMsg::_Msg_T_Online_Device_default_instance_),
};

const char descriptor_table_protodef_T20_5fNetMsg_2eproto[] =
  "\n\020T20_NetMsg.proto\022\006NetMsg\"L\n\014Msg_AskReg"
  "DC\022\n\n\002id\030\001 \001(\014\022\017\n\007version\030\002 \001(\r\022\037\n\007dc_ty"
  "pe\030\003 \001(\0162\016.NetMsg.DCType\"2\n\rMsg_RespRegD"
  "C\022\016\n\006result\030\001 \001(\005\022\021\n\ttimestamp\030\002 \001(\014\"3\n\014"
  "Msg_AskLogin\022\021\n\tuser_name\030\001 \001(\014\022\020\n\010passw"
  "ord\030\002 \001(\014\"2\n\rMsg_RespLogin\022\016\n\006result\030\001 \001"
  "(\005\022\021\n\ttimestamp\030\002 \001(\014\"\"\n\rMsg_AskLogout\022\021"
  "\n\tuser_name\030\001 \001(\014\" \n\016Msg_RespLogout\022\016\n\006r"
  "esult\030\001 \001(\005\"1\n\013Msg_Message\022\021\n\tdevice_id\030"
  "\001 \003(\014\022\017\n\007message\030\002 \001(\014\"\t\n\007Lession\"\214\001\n\rMs"
  "g_StartTask\022\n\n\002id\030\001 \001(\014\022\024\n\014lession_type\030"
  "\002 \001(\014\022\017\n\007task_id\030\003 \001(\014\022\036\n\005train\030\004 \003(\0132\017."
  "NetMsg.Lession\022\022\n\nstudent_id\030\005 \001(\014\022\024\n\014st"
  "udent_name\030\006 \001(\014\"3\n\014Msg_StopTask\022\016\n\006reas"
  "on\030\001 \001(\005\022\023\n\013reason_text\030\002 \001(\014\"0\n\020Msg_Tas"
  "kStepInfo\022\017\n\007step_id\030\001 \001(\005\022\013\n\003msg\030\002 \001(\014\""
  "-\n\014Msg_TaskOver\022\016\n\006reason\030\001 \001(\005\022\r\n\005score"
  "\030\002 \001(\005\"\214\001\n\005Msg_E\022\014\n\004year\030\001 \001(\005\022\r\n\005month\030"
  "\002 \001(\005\022\013\n\003day\030\003 \001(\005\022\014\n\004hour\030\004 \001(\005\022\013\n\003min\030"
  "\005 \001(\005\022\013\n\003sec\030\006 \001(\005\022\020\n\010shellNum\030\007 \001(\014\022\037\n\027"
  "isSelfChkOrTestTxtSaved\030\010 \001(\010\"4\n\005Msg_F\022\030"
  "\n\020FuzeTypeSelected\030\001 \001(\014\022\021\n\tSerialNum\030\002 "
  "\001(\014\"\026\n\005Msg_K\022\r\n\005order\030\001 \001(\014\"\010\n\006Msg_BD\")\n"
  "\023Msg_T_Online_Device\022\022\n\nonlineflag\030\001 \001(\005"
  "*\344&\n\005MsgID\022\020\n\014eMsg_Reserve\020\000\022\021\n\reMsg_Ask"
  "RegDC\020\001\022\022\n\016eMsg_RespRegDC\020\002\022\021\n\reMsg_AskL"
  "ogin\020\003\022\022\n\016eMsg_RespLogin\020\004\022\022\n\016eMsg_AskLo"
  "gout\020\005\022\023\n\017eMsg_RespLogout\020\006\022\020\n\014eMsg_Mess"
  "age\020\007\022\022\n\016eMsg_StartTask\020\024\022\021\n\reMsg_StopTa"
  "sk\020\025\022\025\n\021eMsg_TaskStepInfo\020\026\022\021\n\reMsg_Task"
  "Over\020\027\022\022\n\016eMsg_TaskScore\020\030\022\025\n\021eMsg_T_OnA"
  "ppStart\020e\022\036\n\032eMsg_T_OnSelectMissileType\020"
  "f\022\030\n\024eMsg_T_OnInputDCCode\020g\022\035\n\031eMsg_T_On"
  "InputTemperature\020h\022\033\n\027eMsg_T_OnFlashligh"
  "tWork\020i\022\026\n\022eMsg_T_OnSelfCheck\020j\022\025\n\021eMsg_"
  "T_OnItemTest\020k\022\036\n\032eMsg_T_OnComprehensive"
  "Test\020l\022\020\n\014eMsg_T_OnINS\020m\022\026\n\022eMsg_T_OnTes"
  "tStart\020n\022\025\n\021eMsg_T_OnTestOver\020o\022\031\n\025eMsg_"
  "T_OnCloseWndTest\020p\022\025\n\021eMsg_T_OnCloseApp\020"
  "q\022\030\n\024eMsg_T_OnLine_Device\020r\022\026\n\021eMsg_E_On"
  "AppStart\020\310\001\022\026\n\021eMsg_E_GetSysTime\020\311\001\022\023\n\016e"
  "Msg_E_SysTime\020\312\001\022\033\n\026eMsg_E_OnEnterSelfTe"
  "st\020\313\001\022\030\n\023eMsg_E_TestFinished\020\314\001\022\026\n\021eMsg_"
  "E_LinkEH01OK\020\315\001\022\031\n\024eMsg_E_LinkEH01NotOK\020"
  "\316\001\022\031\n\024eMsg_E_OnInputDCCode\020\317\001\022\030\n\023eMsg_E_"
  "OnSelectAuto\020\320\001\022\033\n\026eMsg_E_OnSelectBridge"
  "R\020\321\001\022\033\n\026eMsg_E_OnSelectResistR\020\322\001\022\032\n\025eMs"
  "g_E_OnEnterWndTest\020\323\001\022\032\n\025eMsg_E_OnCloseW"
  "ndTest\020\324\001\022\026\n\021eMsg_E_SaveHisTxt\020\325\001\022\026\n\021eMs"
  "g_E_OnCloseApp\020\326\001\022\026\n\021eMsg_F_OnAppStart\020\254"
  "\002\022\034\n\027eMsg_F_OnSelectFuzeType\020\255\002\022\031\n\024eMsg_"
  "F_OnInputDCCode\020\256\002\022\037\n\032eMsg_F_OnClickBtnS"
  "tartTest\020\257\002\022\026\n\021eMsg_F_OnTestOver\020\260\002\022\032\n\025e"
  "Msg_F_OnCloseWndTest\020\261\002\022\026\n\021eMsg_F_OnClos"
  "eApp\020\262\002\022\026\n\021eMsg_K_OnAppStart\020\221\003\022\026\n\021eMsg_"
  "K_OnEntermon\020\222\003\022\026\n\021eMsg_K_OnInputCmd\020\223\003\022"
  "\025\n\020eMsg_K_OnInputK1\020\224\003\022\031\n\024eMsg_K_OnInput"
  "A20000\020\225\003\022\025\n\020eMsg_K_OnInputFP\020\226\003\022\025\n\020eMsg"
  "_K_OnInputK2\020\227\003\022\024\n\017eMsg_K_OnInputQ\020\230\003\022\036\n"
  "\031eMsg_K_OnInputUnkownOrder\020\313\003\022\026\n\021eMsg_K_"
  "OnCloseApp\020\302\003\022\027\n\022eMsg_DB_OnAppStart\020\365\003\022\035"
  "\n\030eMsg_DB_OnSelectAutoTest\020\366\003\022#\n\036eMsg_DB"
  "_OnCloseWndInitBindData\020\367\003\022 \n\033eMsg_DB_On"
  "CloseWndKPH01K_CW\020\370\003\022#\n\036eMsg_DB_OnEnterC"
  "ourseAlignment\020\371\003\022\"\n\035eMsg_DB_OnCourseAli"
  "gnmentData\020\372\003\022\036\n\031eMsg_DB_OnClickNavigati"
  "on\020\373\003\022\035\n\030eMsg_DB_OnClickAlignment\020\374\003\022/\n*"
  "eMsg_DB_OnEnterCourseCalibrationNavigati"
  "on\020\375\003\022\032\n\025eMsg_DB_OnClickCancel\020\376\003\022\027\n\022eMs"
  "g_DB_OnCloseApp\020\377\003\022\027\n\022eMsg_X2_OnAppStart"
  "\020\331\004\022\035\n\030eMsg_X2_OnSelectAutoTest\020\332\004\022#\n\036eM"
  "sg_X2_OnEnterWndInitBindData\020\333\004\022#\n\036eMsg_"
  "X2_OnCloseWndInitBindData\020\334\004\022 \n\033eMsg_X2_"
  "OnCloseWndKDH01K_CW\020\335\004\022\035\n\030eMsg_X2_OnEnte"
  "rAlignment\020\336\004\022\035\n\030eMsg_X2_OnCloseAlignmen"
  "t\020\337\004\022\036\n\031eMsg_X2_OnEnterNavigation\020\340\004\022\036\n\031"
  "eMsg_X2_OnCloseNavigation\020\341\004\022\027\n\022eMsg_X2_"
  "OnCloseApp\020\342\004\022\"\n\035eMsg_X2_OnEnterKPHSysSe"
  "lfTest\020\343\004\022\"\n\035eMsg_X2_OnCloseKPHSysSelfTe"
  "st\020\344\004\022!\n\034eMsg_X2_OnTimerAlignmentData\020\345\004"
  "\022\027\n\022eMsg_EP_OnAppStart\020\275\005\022\037\n\032eMsg_EP_OnS"
  "electReadEEPROM\020\276\005\022!\n\034eMsg_EP_OnEnterWnd"
  "KDHStatus1\020\277\005\022!\n\034eMsg_EP_OnEnterWndKDHSt"
  "atus2\020\300\005\022!\n\034eMsg_EP_OnEnterWndKDHStatus3"
  "\020\301\005\022\037\n\032eMsg_EP_OnEnterWndParmBack\020\302\005\022\027\n\022"
  "eMsg_EP_OnCloseApp\020\303\005\022 \n\033eMsg_EP_OnSelec"
  "tWriteEEPROM\020\306\005\022\037\n\032eMsg_EP_OnEnterOpenIn"
  "iFile\020\307\005\022 \n\033eMsg_EP_OnEnterCloseIniFile\020"
  "\310\005\022#\n\036eMsg_EP_OnEnterCalibrateParmP1\020\311\005\022"
  "#\n\036eMsg_EP_OnEnterCalibrateParmP2\020\312\005\022#\n\036"
  "eMsg_EP_OnEnterCalibrateParmP3\020\313\005\022#\n\036eMs"
  "g_EP_OnEnterCalibrateParmP4\020\314\005\022 \n\033eMsg_E"
  "P_OnCloseWndKDHStatus\020\315\005\022\027\n\022eMsg_EK_OnAp"
  "pStart\020\241\006\022\034\n\027eMsg_EK_OnEnterWndAlert\020\242\006\022"
  "\034\n\027eMsg_EK_OnCloseWndAlert\020\243\006\022%\n eMsg_EK"
  "_OnSelectShellCalibration\020\244\006\0220\n+eMsg_EK_"
  "OnEnterWndCalibrationDataProcessing\020\245\006\0220"
  "\n+eMsg_EK_OnCloseWndCalibrationDataProce"
  "ssing\020\246\006\022,\n\'eMsg_EK_OnEnterWndCalibratio"
  "nDataResult\020\247\006\022,\n\'eMsg_EK_OnCloseWndCali"
  "brationDataResult\020\250\006\022$\n\037eMsg_EK_OnEnterW"
  "ndOpenDataFile1\020\251\006\022$\n\037eMsg_EK_OnCloseWnd"
  "OpenDataFile1\020\252\006\022!\n\034eMsg_EK_OnEnterWndSa"
  "veResult\020\253\006\022!\n\034eMsg_EK_OnCloseWndSaveRes"
  "ult\020\254\006\022\034\n\027eMsg_EK_VGC_OnSelectVGC\020\255\006\022,\n\'"
  "eMsg_EK_VGC_OnEnterWndVGCDataProcessing\020"
  "\256\006\022,\n\'eMsg_EK_VGC_OnCloseWndVGCDataProce"
  "ssing\020\257\006\022$\n\037eMsg_EK_VGC_OnEnterWndVGCRes"
  "ult\020\260\006\022$\n\037eMsg_EK_VGC_OnCloseWndVGCResul"
  "t\020\261\006\022\030\n\023eMsg_EK_OnSelectHGC\020\262\006\022(\n#eMsg_E"
  "K_OnEnterWndHGCDataProcessing\020\263\006\022(\n#eMsg"
  "_EK_OnCloseWndHGCDataProcessing\020\264\006\022 \n\033eM"
  "sg_EK_OnEnterWndHGCResult\020\265\006\022 \n\033eMsg_EK_"
  "OnCloseWndHGCResult\020\266\006\022\027\n\022eMsg_EK_OnSele"
  "ctAC\020\302\006\022(\n#eMsg_EK_OnEnterWndSBTDataProc"
  "essing\020\267\006\022(\n#eMsg_EK_OnCloseWndSBTDataPr"
  "ocessing\020\270\006\022\034\n\027eMsg_EK_OnSelectIFBoard\020\271"
  "\006\022)\n$eMsg_EK_OnEnterWndACDataProcessingI"
  "F\020\272\006\022\036\n\031eMsg_EK_OnSelectAddTableG\020\273\006\022+\n&"
  "eMsg_EK_OnEnterWndACGCDataProcessingIF\020\274"
  "\006\022+\n&eMsg_EK_OnCloseWndACGCDataProcessin"
  "gIF\020\275\006\022!\n\034eMsg_EK_OnEnterWndACGCResult\020\276"
  "\006\022 \n\033eMsg_EK_OnEnterWndVGCResult\020\277\006\022 \n\033e"
  "Msg_EK_OnCloseWndVGCResult\020\300\006\022\027\n\022eMsg_EK"
  "_OnCloseApp\020\301\006\022\027\n\022eMsg_Y2_OnAppStart\020\205\007\022"
  "&\n!eMsg_Y2_OnEnterWndFailSafeSetting\020\206\007\022"
  "&\n!eMsg_Y2_OnCloseWndFailSafeSetting\020\207\007\022"
  "\037\n\032eMsg_Y2_OnSelectSingleTest\020\210\007\022!\n\034eMsg"
  "_Y2_OnEnterWndSingleTest\020\211\007\022!\n\034eMsg_Y2_O"
  "nCloseWndSingleTest\020\212\007\022!\n\034eMsg_Y2_OnClic"
  "kBtnNavigation\020\213\007\022 \n\033eMsg_Y2_OnClickBtnA"
  "lignment\020\214\007\022!\n\034eMsg_Y2_OnEnterWndNavigat"
  "ion\020\215\007\022!\n\034eMsg_Y2_OnCloseWndNavigation\020\216"
  "\007\022 \n\033eMsg_Y2_OnEnterWndKDHStatus\020\217\007\022 \n\033e"
  "Msg_Y2_OnCloseWndKDHStatus\020\220\007\022\027\n\022eMsg_Y2"
  "_OnCloseApp\020\221\007\022\027\n\022eMsg_J2_OnAppStart\020\351\007\022"
  "\037\n\032eMsg_J2_OnSelectSingleTest\020\352\007\022%\n eMsg"
  "_J2_OnEnterWndKDHSysSelfTest\020\353\007\022%\n eMsg_"
  "J2_OnCloseWndKDHSysSelfTest\020\354\007\022#\n\036eMsg_J"
  "2_OnEnterWndInitBindData\020\355\007\022#\n\036eMsg_J2_O"
  "nCloseWndInitBindData\020\356\007\022\036\n\031eMsg_J2_OnEn"
  "terWndBackMsg\020\357\007\022\036\n\031eMsg_J2_OnCloseWndBa"
  "ckMsg\020\360\007\022\034\n\027eMsg_J2_OnEnterWndSysCW\020\361\007\022\034"
  "\n\027eMsg_J2_OnCloseWndSysCW\020\362\007\022$\n\037eMsg_J2_"
  "OnEnterWndTestAlignment\020\363\007\022$\n\037eMsg_J2_On"
  "CloseWndTestAlignment\020\364\007\022%\n eMsg_J2_OnEn"
  "terWndTestNavigation\020\365\007\022%\n eMsg_J2_OnClo"
  "seWndTestNavigation\020\366\007\022\027\n\022eMsg_J2_OnClos"
  "eApp\020\367\007*}\n\006DCType\022\017\n\013DCType_None\020\000\022\017\n\013DC"
  "Type_Test\020\001\022\016\n\nDCType_EED\020\002\022\017\n\013DCType_Fu"
  "ze\020\003\022\017\n\013DCType_INS1\020\004\022\017\n\013DCType_INS2\020\005\022\016"
  "\n\nDCType_Oil\020\006*\216\002\n\014SelfCheck20T\022\030\n\024SelfC"
  "heck20T_Channel\020\000\022\024\n\020SelfCheck20T_422\020\001\022"
  "+\n\'SelfCheck20T_ProgramControlledEquipme"
  "nt\020\002\022 \n\034SelfCheck20T_IntegratedPower\020\003\022\030"
  "\n\024SelfCheck20T_MFPower\020\004\022\033\n\027SelfCheck20T"
  "_Atmosphere\020\005\022\032\n\026SelfCheck20T_Altimeter\020"
  "\006\022\024\n\020SelfCheck20T_GPS\020\007\022\026\n\022SelfCheck20T_"
  "Scene\020\010*\375\002\n\013ItemTest20T\022\'\n#ItemTest20T_F"
  "lightControlParameters\020\000\022!\n\035ItemTest20T_"
  "ParallelInterface\020\001\022\032\n\026ItemTest20T_Seria"
  "lPort\020\002\022\033\n\027ItemTest20T_AirPressure\020\003\022\023\n\017"
  "ItemTest20T_DPU\020\004\022\031\n\025ItemTest20T_Altimet"
  "er\020\005\022 \n\034ItemTest20T_PropulsionSystem\020\006\022\026"
  "\n\022ItemTest20T_Rudder\020\007\022\030\n\024ItemTest20T_Oi"
  "lLevel\020\010\022\025\n\021ItemTest20T_Scene\020\t\022\030\n\024ItemT"
  "est20T_Lighting\020\n\022\036\n\032ItemTest20T_Electri"
  "cSystem\020\013\022\024\n\020ItemTest20T_Fuze\020\014b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_T20_5fNetMsg_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_T20_5fNetMsg_2eproto_sccs[17] = {
  &scc_info_Lession_T20_5fNetMsg_2eproto.base,
  &scc_info_Msg_AskLogin_T20_5fNetMsg_2eproto.base,
  &scc_info_Msg_AskLogout_T20_5fNetMsg_2eproto.base,
  &scc_info_Msg_AskRegDC_T20_5fNetMsg_2eproto.base,
  &scc_info_Msg_BD_T20_5fNetMsg_2eproto.base,
  &scc_info_Msg_E_T20_5fNetMsg_2eproto.base,
  &scc_info_Msg_F_T20_5fNetMsg_2eproto.base,
  &scc_info_Msg_K_T20_5fNetMsg_2eproto.base,
  &scc_info_Msg_Message_T20_5fNetMsg_2eproto.base,
  &scc_info_Msg_RespLogin_T20_5fNetMsg_2eproto.base,
  &scc_info_Msg_RespLogout_T20_5fNetMsg_2eproto.base,
  &scc_info_Msg_RespRegDC_T20_5fNetMsg_2eproto.base,
  &scc_info_Msg_StartTask_T20_5fNetMsg_2eproto.base,
  &scc_info_Msg_StopTask_T20_5fNetMsg_2eproto.base,
  &scc_info_Msg_T_Online_Device_T20_5fNetMsg_2eproto.base,
  &scc_info_Msg_TaskOver_T20_5fNetMsg_2eproto.base,
  &scc_info_Msg_TaskStepInfo_T20_5fNetMsg_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_T20_5fNetMsg_2eproto_once;
static bool descriptor_table_T20_5fNetMsg_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_T20_5fNetMsg_2eproto = {
  &descriptor_table_T20_5fNetMsg_2eproto_initialized, descriptor_table_protodef_T20_5fNetMsg_2eproto, "T20_NetMsg.proto", 6719,
  &descriptor_table_T20_5fNetMsg_2eproto_once, descriptor_table_T20_5fNetMsg_2eproto_sccs, descriptor_table_T20_5fNetMsg_2eproto_deps, 17, 0,
  schemas, file_default_instances, TableStruct_T20_5fNetMsg_2eproto::offsets,
  file_level_metadata_T20_5fNetMsg_2eproto, 17, file_level_enum_descriptors_T20_5fNetMsg_2eproto, file_level_service_descriptors_T20_5fNetMsg_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_T20_5fNetMsg_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_T20_5fNetMsg_2eproto), true);
namespace NetMsg {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MsgID_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_T20_5fNetMsg_2eproto);
  return file_level_enum_descriptors_T20_5fNetMsg_2eproto[0];
}
bool MsgID_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 209:
    case 210:
    case 211:
    case 212:
    case 213:
    case 214:
    case 300:
    case 301:
    case 302:
    case 303:
    case 304:
    case 305:
    case 306:
    case 401:
    case 402:
    case 403:
    case 404:
    case 405:
    case 406:
    case 407:
    case 408:
    case 450:
    case 459:
    case 501:
    case 502:
    case 503:
    case 504:
    case 505:
    case 506:
    case 507:
    case 508:
    case 509:
    case 510:
    case 511:
    case 601:
    case 602:
    case 603:
    case 604:
    case 605:
    case 606:
    case 607:
    case 608:
    case 609:
    case 610:
    case 611:
    case 612:
    case 613:
    case 701:
    case 702:
    case 703:
    case 704:
    case 705:
    case 706:
    case 707:
    case 710:
    case 711:
    case 712:
    case 713:
    case 714:
    case 715:
    case 716:
    case 717:
    case 801:
    case 802:
    case 803:
    case 804:
    case 805:
    case 806:
    case 807:
    case 808:
    case 809:
    case 810:
    case 811:
    case 812:
    case 813:
    case 814:
    case 815:
    case 816:
    case 817:
    case 818:
    case 819:
    case 820:
    case 821:
    case 822:
    case 823:
    case 824:
    case 825:
    case 826:
    case 827:
    case 828:
    case 829:
    case 830:
    case 831:
    case 832:
    case 833:
    case 834:
    case 901:
    case 902:
    case 903:
    case 904:
    case 905:
    case 906:
    case 907:
    case 908:
    case 909:
    case 910:
    case 911:
    case 912:
    case 913:
    case 1001:
    case 1002:
    case 1003:
    case 1004:
    case 1005:
    case 1006:
    case 1007:
    case 1008:
    case 1009:
    case 1010:
    case 1011:
    case 1012:
    case 1013:
    case 1014:
    case 1015:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DCType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_T20_5fNetMsg_2eproto);
  return file_level_enum_descriptors_T20_5fNetMsg_2eproto[1];
}
bool DCType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SelfCheck20T_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_T20_5fNetMsg_2eproto);
  return file_level_enum_descriptors_T20_5fNetMsg_2eproto[2];
}
bool SelfCheck20T_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ItemTest20T_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_T20_5fNetMsg_2eproto);
  return file_level_enum_descriptors_T20_5fNetMsg_2eproto[3];
}
bool ItemTest20T_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Msg_AskRegDC::InitAsDefaultInstance() {
}
class Msg_AskRegDC::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Msg_AskRegDC::kIdFieldNumber;
const int Msg_AskRegDC::kVersionFieldNumber;
const int Msg_AskRegDC::kDcTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Msg_AskRegDC::Msg_AskRegDC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.Msg_AskRegDC)
}
Msg_AskRegDC::Msg_AskRegDC(const Msg_AskRegDC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&dc_type_) -
    reinterpret_cast<char*>(&version_)) + sizeof(dc_type_));
  // @@protoc_insertion_point(copy_constructor:NetMsg.Msg_AskRegDC)
}

void Msg_AskRegDC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Msg_AskRegDC_T20_5fNetMsg_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dc_type_) -
      reinterpret_cast<char*>(&version_)) + sizeof(dc_type_));
}

Msg_AskRegDC::~Msg_AskRegDC() {
  // @@protoc_insertion_point(destructor:NetMsg.Msg_AskRegDC)
  SharedDtor();
}

void Msg_AskRegDC::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Msg_AskRegDC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Msg_AskRegDC& Msg_AskRegDC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Msg_AskRegDC_T20_5fNetMsg_2eproto.base);
  return *internal_default_instance();
}


void Msg_AskRegDC::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.Msg_AskRegDC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dc_type_) -
      reinterpret_cast<char*>(&version_)) + sizeof(dc_type_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Msg_AskRegDC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .NetMsg.DCType dc_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_dc_type(static_cast<::NetMsg::DCType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Msg_AskRegDC::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.Msg_AskRegDC)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 version = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NetMsg.DCType dc_type = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_dc_type(static_cast< ::NetMsg::DCType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.Msg_AskRegDC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.Msg_AskRegDC)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Msg_AskRegDC::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.Msg_AskRegDC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->id(), output);
  }

  // uint32 version = 2;
  if (this->version() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->version(), output);
  }

  // .NetMsg.DCType dc_type = 3;
  if (this->dc_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->dc_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NetMsg.Msg_AskRegDC)
}

::PROTOBUF_NAMESPACE_ID::uint8* Msg_AskRegDC::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.Msg_AskRegDC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes id = 1;
  if (this->id().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }

  // uint32 version = 2;
  if (this->version() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->version(), target);
  }

  // .NetMsg.DCType dc_type = 3;
  if (this->dc_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->dc_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.Msg_AskRegDC)
  return target;
}

size_t Msg_AskRegDC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.Msg_AskRegDC)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->id());
  }

  // uint32 version = 2;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->version());
  }

  // .NetMsg.DCType dc_type = 3;
  if (this->dc_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->dc_type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Msg_AskRegDC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.Msg_AskRegDC)
  GOOGLE_DCHECK_NE(&from, this);
  const Msg_AskRegDC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Msg_AskRegDC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.Msg_AskRegDC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.Msg_AskRegDC)
    MergeFrom(*source);
  }
}

void Msg_AskRegDC::MergeFrom(const Msg_AskRegDC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.Msg_AskRegDC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
  if (from.dc_type() != 0) {
    set_dc_type(from.dc_type());
  }
}

void Msg_AskRegDC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.Msg_AskRegDC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_AskRegDC::CopyFrom(const Msg_AskRegDC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.Msg_AskRegDC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_AskRegDC::IsInitialized() const {
  return true;
}

void Msg_AskRegDC::Swap(Msg_AskRegDC* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Msg_AskRegDC::InternalSwap(Msg_AskRegDC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(version_, other->version_);
  swap(dc_type_, other->dc_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_AskRegDC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Msg_RespRegDC::InitAsDefaultInstance() {
}
class Msg_RespRegDC::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Msg_RespRegDC::kResultFieldNumber;
const int Msg_RespRegDC::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Msg_RespRegDC::Msg_RespRegDC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.Msg_RespRegDC)
}
Msg_RespRegDC::Msg_RespRegDC(const Msg_RespRegDC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  timestamp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.timestamp().size() > 0) {
    timestamp_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.timestamp_);
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:NetMsg.Msg_RespRegDC)
}

void Msg_RespRegDC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Msg_RespRegDC_T20_5fNetMsg_2eproto.base);
  timestamp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
}

Msg_RespRegDC::~Msg_RespRegDC() {
  // @@protoc_insertion_point(destructor:NetMsg.Msg_RespRegDC)
  SharedDtor();
}

void Msg_RespRegDC::SharedDtor() {
  timestamp_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Msg_RespRegDC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Msg_RespRegDC& Msg_RespRegDC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Msg_RespRegDC_T20_5fNetMsg_2eproto.base);
  return *internal_default_instance();
}


void Msg_RespRegDC::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.Msg_RespRegDC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timestamp_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Msg_RespRegDC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_timestamp(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Msg_RespRegDC::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.Msg_RespRegDC)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 result = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes timestamp = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.Msg_RespRegDC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.Msg_RespRegDC)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Msg_RespRegDC::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.Msg_RespRegDC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // bytes timestamp = 2;
  if (this->timestamp().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NetMsg.Msg_RespRegDC)
}

::PROTOBUF_NAMESPACE_ID::uint8* Msg_RespRegDC::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.Msg_RespRegDC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // bytes timestamp = 2;
  if (this->timestamp().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.Msg_RespRegDC)
  return target;
}

size_t Msg_RespRegDC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.Msg_RespRegDC)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes timestamp = 2;
  if (this->timestamp().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->timestamp());
  }

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->result());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Msg_RespRegDC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.Msg_RespRegDC)
  GOOGLE_DCHECK_NE(&from, this);
  const Msg_RespRegDC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Msg_RespRegDC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.Msg_RespRegDC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.Msg_RespRegDC)
    MergeFrom(*source);
  }
}

void Msg_RespRegDC::MergeFrom(const Msg_RespRegDC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.Msg_RespRegDC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timestamp().size() > 0) {

    timestamp_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.timestamp_);
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void Msg_RespRegDC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.Msg_RespRegDC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_RespRegDC::CopyFrom(const Msg_RespRegDC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.Msg_RespRegDC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_RespRegDC::IsInitialized() const {
  return true;
}

void Msg_RespRegDC::Swap(Msg_RespRegDC* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Msg_RespRegDC::InternalSwap(Msg_RespRegDC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  timestamp_.Swap(&other->timestamp_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_RespRegDC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Msg_AskLogin::InitAsDefaultInstance() {
}
class Msg_AskLogin::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Msg_AskLogin::kUserNameFieldNumber;
const int Msg_AskLogin::kPasswordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Msg_AskLogin::Msg_AskLogin()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.Msg_AskLogin)
}
Msg_AskLogin::Msg_AskLogin(const Msg_AskLogin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.user_name().size() > 0) {
    user_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_name_);
  }
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.password().size() > 0) {
    password_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  // @@protoc_insertion_point(copy_constructor:NetMsg.Msg_AskLogin)
}

void Msg_AskLogin::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Msg_AskLogin_T20_5fNetMsg_2eproto.base);
  user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Msg_AskLogin::~Msg_AskLogin() {
  // @@protoc_insertion_point(destructor:NetMsg.Msg_AskLogin)
  SharedDtor();
}

void Msg_AskLogin::SharedDtor() {
  user_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Msg_AskLogin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Msg_AskLogin& Msg_AskLogin::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Msg_AskLogin_T20_5fNetMsg_2eproto.base);
  return *internal_default_instance();
}


void Msg_AskLogin::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.Msg_AskLogin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Msg_AskLogin::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes user_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_user_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_password(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Msg_AskLogin::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.Msg_AskLogin)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes user_name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes password = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_password()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.Msg_AskLogin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.Msg_AskLogin)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Msg_AskLogin::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.Msg_AskLogin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes user_name = 1;
  if (this->user_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->user_name(), output);
  }

  // bytes password = 2;
  if (this->password().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->password(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NetMsg.Msg_AskLogin)
}

::PROTOBUF_NAMESPACE_ID::uint8* Msg_AskLogin::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.Msg_AskLogin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes user_name = 1;
  if (this->user_name().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->user_name(), target);
  }

  // bytes password = 2;
  if (this->password().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->password(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.Msg_AskLogin)
  return target;
}

size_t Msg_AskLogin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.Msg_AskLogin)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes user_name = 1;
  if (this->user_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->user_name());
  }

  // bytes password = 2;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->password());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Msg_AskLogin::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.Msg_AskLogin)
  GOOGLE_DCHECK_NE(&from, this);
  const Msg_AskLogin* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Msg_AskLogin>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.Msg_AskLogin)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.Msg_AskLogin)
    MergeFrom(*source);
  }
}

void Msg_AskLogin::MergeFrom(const Msg_AskLogin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.Msg_AskLogin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_name().size() > 0) {

    user_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_name_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
}

void Msg_AskLogin::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.Msg_AskLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_AskLogin::CopyFrom(const Msg_AskLogin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.Msg_AskLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_AskLogin::IsInitialized() const {
  return true;
}

void Msg_AskLogin::Swap(Msg_AskLogin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Msg_AskLogin::InternalSwap(Msg_AskLogin* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  user_name_.Swap(&other->user_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  password_.Swap(&other->password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_AskLogin::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Msg_RespLogin::InitAsDefaultInstance() {
}
class Msg_RespLogin::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Msg_RespLogin::kResultFieldNumber;
const int Msg_RespLogin::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Msg_RespLogin::Msg_RespLogin()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.Msg_RespLogin)
}
Msg_RespLogin::Msg_RespLogin(const Msg_RespLogin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  timestamp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.timestamp().size() > 0) {
    timestamp_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.timestamp_);
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:NetMsg.Msg_RespLogin)
}

void Msg_RespLogin::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Msg_RespLogin_T20_5fNetMsg_2eproto.base);
  timestamp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
}

Msg_RespLogin::~Msg_RespLogin() {
  // @@protoc_insertion_point(destructor:NetMsg.Msg_RespLogin)
  SharedDtor();
}

void Msg_RespLogin::SharedDtor() {
  timestamp_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Msg_RespLogin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Msg_RespLogin& Msg_RespLogin::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Msg_RespLogin_T20_5fNetMsg_2eproto.base);
  return *internal_default_instance();
}


void Msg_RespLogin::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.Msg_RespLogin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timestamp_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Msg_RespLogin::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_timestamp(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Msg_RespLogin::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.Msg_RespLogin)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 result = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes timestamp = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.Msg_RespLogin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.Msg_RespLogin)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Msg_RespLogin::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.Msg_RespLogin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // bytes timestamp = 2;
  if (this->timestamp().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NetMsg.Msg_RespLogin)
}

::PROTOBUF_NAMESPACE_ID::uint8* Msg_RespLogin::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.Msg_RespLogin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // bytes timestamp = 2;
  if (this->timestamp().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.Msg_RespLogin)
  return target;
}

size_t Msg_RespLogin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.Msg_RespLogin)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes timestamp = 2;
  if (this->timestamp().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->timestamp());
  }

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->result());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Msg_RespLogin::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.Msg_RespLogin)
  GOOGLE_DCHECK_NE(&from, this);
  const Msg_RespLogin* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Msg_RespLogin>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.Msg_RespLogin)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.Msg_RespLogin)
    MergeFrom(*source);
  }
}

void Msg_RespLogin::MergeFrom(const Msg_RespLogin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.Msg_RespLogin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timestamp().size() > 0) {

    timestamp_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.timestamp_);
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void Msg_RespLogin::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.Msg_RespLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_RespLogin::CopyFrom(const Msg_RespLogin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.Msg_RespLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_RespLogin::IsInitialized() const {
  return true;
}

void Msg_RespLogin::Swap(Msg_RespLogin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Msg_RespLogin::InternalSwap(Msg_RespLogin* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  timestamp_.Swap(&other->timestamp_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_RespLogin::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Msg_AskLogout::InitAsDefaultInstance() {
}
class Msg_AskLogout::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Msg_AskLogout::kUserNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Msg_AskLogout::Msg_AskLogout()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.Msg_AskLogout)
}
Msg_AskLogout::Msg_AskLogout(const Msg_AskLogout& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.user_name().size() > 0) {
    user_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_name_);
  }
  // @@protoc_insertion_point(copy_constructor:NetMsg.Msg_AskLogout)
}

void Msg_AskLogout::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Msg_AskLogout_T20_5fNetMsg_2eproto.base);
  user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Msg_AskLogout::~Msg_AskLogout() {
  // @@protoc_insertion_point(destructor:NetMsg.Msg_AskLogout)
  SharedDtor();
}

void Msg_AskLogout::SharedDtor() {
  user_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Msg_AskLogout::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Msg_AskLogout& Msg_AskLogout::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Msg_AskLogout_T20_5fNetMsg_2eproto.base);
  return *internal_default_instance();
}


void Msg_AskLogout::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.Msg_AskLogout)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Msg_AskLogout::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes user_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_user_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Msg_AskLogout::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.Msg_AskLogout)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes user_name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.Msg_AskLogout)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.Msg_AskLogout)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Msg_AskLogout::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.Msg_AskLogout)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes user_name = 1;
  if (this->user_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->user_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NetMsg.Msg_AskLogout)
}

::PROTOBUF_NAMESPACE_ID::uint8* Msg_AskLogout::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.Msg_AskLogout)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes user_name = 1;
  if (this->user_name().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->user_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.Msg_AskLogout)
  return target;
}

size_t Msg_AskLogout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.Msg_AskLogout)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes user_name = 1;
  if (this->user_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->user_name());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Msg_AskLogout::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.Msg_AskLogout)
  GOOGLE_DCHECK_NE(&from, this);
  const Msg_AskLogout* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Msg_AskLogout>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.Msg_AskLogout)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.Msg_AskLogout)
    MergeFrom(*source);
  }
}

void Msg_AskLogout::MergeFrom(const Msg_AskLogout& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.Msg_AskLogout)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_name().size() > 0) {

    user_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_name_);
  }
}

void Msg_AskLogout::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.Msg_AskLogout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_AskLogout::CopyFrom(const Msg_AskLogout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.Msg_AskLogout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_AskLogout::IsInitialized() const {
  return true;
}

void Msg_AskLogout::Swap(Msg_AskLogout* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Msg_AskLogout::InternalSwap(Msg_AskLogout* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  user_name_.Swap(&other->user_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_AskLogout::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Msg_RespLogout::InitAsDefaultInstance() {
}
class Msg_RespLogout::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Msg_RespLogout::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Msg_RespLogout::Msg_RespLogout()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.Msg_RespLogout)
}
Msg_RespLogout::Msg_RespLogout(const Msg_RespLogout& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:NetMsg.Msg_RespLogout)
}

void Msg_RespLogout::SharedCtor() {
  result_ = 0;
}

Msg_RespLogout::~Msg_RespLogout() {
  // @@protoc_insertion_point(destructor:NetMsg.Msg_RespLogout)
  SharedDtor();
}

void Msg_RespLogout::SharedDtor() {
}

void Msg_RespLogout::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Msg_RespLogout& Msg_RespLogout::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Msg_RespLogout_T20_5fNetMsg_2eproto.base);
  return *internal_default_instance();
}


void Msg_RespLogout::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.Msg_RespLogout)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Msg_RespLogout::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Msg_RespLogout::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.Msg_RespLogout)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 result = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.Msg_RespLogout)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.Msg_RespLogout)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Msg_RespLogout::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.Msg_RespLogout)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NetMsg.Msg_RespLogout)
}

::PROTOBUF_NAMESPACE_ID::uint8* Msg_RespLogout::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.Msg_RespLogout)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.Msg_RespLogout)
  return target;
}

size_t Msg_RespLogout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.Msg_RespLogout)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->result());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Msg_RespLogout::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.Msg_RespLogout)
  GOOGLE_DCHECK_NE(&from, this);
  const Msg_RespLogout* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Msg_RespLogout>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.Msg_RespLogout)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.Msg_RespLogout)
    MergeFrom(*source);
  }
}

void Msg_RespLogout::MergeFrom(const Msg_RespLogout& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.Msg_RespLogout)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    set_result(from.result());
  }
}

void Msg_RespLogout::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.Msg_RespLogout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_RespLogout::CopyFrom(const Msg_RespLogout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.Msg_RespLogout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_RespLogout::IsInitialized() const {
  return true;
}

void Msg_RespLogout::Swap(Msg_RespLogout* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Msg_RespLogout::InternalSwap(Msg_RespLogout* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_RespLogout::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Msg_Message::InitAsDefaultInstance() {
}
class Msg_Message::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Msg_Message::kDeviceIdFieldNumber;
const int Msg_Message::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Msg_Message::Msg_Message()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.Msg_Message)
}
Msg_Message::Msg_Message(const Msg_Message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      device_id_(from.device_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.message().size() > 0) {
    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  // @@protoc_insertion_point(copy_constructor:NetMsg.Msg_Message)
}

void Msg_Message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Msg_Message_T20_5fNetMsg_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Msg_Message::~Msg_Message() {
  // @@protoc_insertion_point(destructor:NetMsg.Msg_Message)
  SharedDtor();
}

void Msg_Message::SharedDtor() {
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Msg_Message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Msg_Message& Msg_Message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Msg_Message_T20_5fNetMsg_2eproto.base);
  return *internal_default_instance();
}


void Msg_Message::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.Msg_Message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_id_.Clear();
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Msg_Message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated bytes device_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_device_id(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // bytes message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_message(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Msg_Message::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.Msg_Message)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes device_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->add_device_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes message = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.Msg_Message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.Msg_Message)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Msg_Message::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.Msg_Message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes device_id = 1;
  for (int i = 0, n = this->device_id_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytes(
      1, this->device_id(i), output);
  }

  // bytes message = 2;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NetMsg.Msg_Message)
}

::PROTOBUF_NAMESPACE_ID::uint8* Msg_Message::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.Msg_Message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes device_id = 1;
  for (int i = 0, n = this->device_id_size(); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteBytesToArray(1, this->device_id(i), target);
  }

  // bytes message = 2;
  if (this->message().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.Msg_Message)
  return target;
}

size_t Msg_Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.Msg_Message)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes device_id = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->device_id_size());
  for (int i = 0, n = this->device_id_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      this->device_id(i));
  }

  // bytes message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->message());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Msg_Message::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.Msg_Message)
  GOOGLE_DCHECK_NE(&from, this);
  const Msg_Message* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Msg_Message>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.Msg_Message)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.Msg_Message)
    MergeFrom(*source);
  }
}

void Msg_Message::MergeFrom(const Msg_Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.Msg_Message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  device_id_.MergeFrom(from.device_id_);
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
}

void Msg_Message::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.Msg_Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_Message::CopyFrom(const Msg_Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.Msg_Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_Message::IsInitialized() const {
  return true;
}

void Msg_Message::Swap(Msg_Message* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Msg_Message::InternalSwap(Msg_Message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  device_id_.InternalSwap(CastToBase(&other->device_id_));
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_Message::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Lession::InitAsDefaultInstance() {
}
class Lession::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Lession::Lession()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.Lession)
}
Lession::Lession(const Lession& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:NetMsg.Lession)
}

void Lession::SharedCtor() {
}

Lession::~Lession() {
  // @@protoc_insertion_point(destructor:NetMsg.Lession)
  SharedDtor();
}

void Lession::SharedDtor() {
}

void Lession::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Lession& Lession::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Lession_T20_5fNetMsg_2eproto.base);
  return *internal_default_instance();
}


void Lession::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.Lession)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Lession::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Lession::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.Lession)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.Lession)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.Lession)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Lession::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.Lession)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NetMsg.Lession)
}

::PROTOBUF_NAMESPACE_ID::uint8* Lession::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.Lession)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.Lession)
  return target;
}

size_t Lession::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.Lession)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Lession::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.Lession)
  GOOGLE_DCHECK_NE(&from, this);
  const Lession* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Lession>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.Lession)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.Lession)
    MergeFrom(*source);
  }
}

void Lession::MergeFrom(const Lession& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.Lession)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Lession::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.Lession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lession::CopyFrom(const Lession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.Lession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lession::IsInitialized() const {
  return true;
}

void Lession::Swap(Lession* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Lession::InternalSwap(Lession* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Lession::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Msg_StartTask::InitAsDefaultInstance() {
}
class Msg_StartTask::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Msg_StartTask::kIdFieldNumber;
const int Msg_StartTask::kLessionTypeFieldNumber;
const int Msg_StartTask::kTaskIdFieldNumber;
const int Msg_StartTask::kTrainFieldNumber;
const int Msg_StartTask::kStudentIdFieldNumber;
const int Msg_StartTask::kStudentNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Msg_StartTask::Msg_StartTask()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.Msg_StartTask)
}
Msg_StartTask::Msg_StartTask(const Msg_StartTask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      train_(from.train_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  lession_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.lession_type().size() > 0) {
    lession_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.lession_type_);
  }
  task_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.task_id().size() > 0) {
    task_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.task_id_);
  }
  student_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.student_id().size() > 0) {
    student_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.student_id_);
  }
  student_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.student_name().size() > 0) {
    student_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.student_name_);
  }
  // @@protoc_insertion_point(copy_constructor:NetMsg.Msg_StartTask)
}

void Msg_StartTask::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Msg_StartTask_T20_5fNetMsg_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lession_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  task_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  student_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  student_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Msg_StartTask::~Msg_StartTask() {
  // @@protoc_insertion_point(destructor:NetMsg.Msg_StartTask)
  SharedDtor();
}

void Msg_StartTask::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lession_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  task_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  student_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  student_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Msg_StartTask::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Msg_StartTask& Msg_StartTask::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Msg_StartTask_T20_5fNetMsg_2eproto.base);
  return *internal_default_instance();
}


void Msg_StartTask::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.Msg_StartTask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  train_.Clear();
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lession_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  task_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  student_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  student_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Msg_StartTask::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes lession_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_lession_type(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes task_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_task_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .NetMsg.Lession train = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_train(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // bytes student_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_student_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes student_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_student_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Msg_StartTask::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.Msg_StartTask)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes lession_type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_lession_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes task_id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_task_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NetMsg.Lession train = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_train()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes student_id = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_student_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes student_name = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_student_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.Msg_StartTask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.Msg_StartTask)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Msg_StartTask::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.Msg_StartTask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->id(), output);
  }

  // bytes lession_type = 2;
  if (this->lession_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->lession_type(), output);
  }

  // bytes task_id = 3;
  if (this->task_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->task_id(), output);
  }

  // repeated .NetMsg.Lession train = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->train_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->train(static_cast<int>(i)),
      output);
  }

  // bytes student_id = 5;
  if (this->student_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->student_id(), output);
  }

  // bytes student_name = 6;
  if (this->student_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->student_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NetMsg.Msg_StartTask)
}

::PROTOBUF_NAMESPACE_ID::uint8* Msg_StartTask::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.Msg_StartTask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes id = 1;
  if (this->id().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }

  // bytes lession_type = 2;
  if (this->lession_type().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->lession_type(), target);
  }

  // bytes task_id = 3;
  if (this->task_id().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        3, this->task_id(), target);
  }

  // repeated .NetMsg.Lession train = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->train_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->train(static_cast<int>(i)), target);
  }

  // bytes student_id = 5;
  if (this->student_id().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        5, this->student_id(), target);
  }

  // bytes student_name = 6;
  if (this->student_name().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        6, this->student_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.Msg_StartTask)
  return target;
}

size_t Msg_StartTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.Msg_StartTask)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .NetMsg.Lession train = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->train_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->train(static_cast<int>(i)));
    }
  }

  // bytes id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->id());
  }

  // bytes lession_type = 2;
  if (this->lession_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->lession_type());
  }

  // bytes task_id = 3;
  if (this->task_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->task_id());
  }

  // bytes student_id = 5;
  if (this->student_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->student_id());
  }

  // bytes student_name = 6;
  if (this->student_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->student_name());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Msg_StartTask::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.Msg_StartTask)
  GOOGLE_DCHECK_NE(&from, this);
  const Msg_StartTask* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Msg_StartTask>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.Msg_StartTask)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.Msg_StartTask)
    MergeFrom(*source);
  }
}

void Msg_StartTask::MergeFrom(const Msg_StartTask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.Msg_StartTask)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  train_.MergeFrom(from.train_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.lession_type().size() > 0) {

    lession_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.lession_type_);
  }
  if (from.task_id().size() > 0) {

    task_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.task_id_);
  }
  if (from.student_id().size() > 0) {

    student_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.student_id_);
  }
  if (from.student_name().size() > 0) {

    student_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.student_name_);
  }
}

void Msg_StartTask::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.Msg_StartTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_StartTask::CopyFrom(const Msg_StartTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.Msg_StartTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_StartTask::IsInitialized() const {
  return true;
}

void Msg_StartTask::Swap(Msg_StartTask* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Msg_StartTask::InternalSwap(Msg_StartTask* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&train_)->InternalSwap(CastToBase(&other->train_));
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  lession_type_.Swap(&other->lession_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  task_id_.Swap(&other->task_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  student_id_.Swap(&other->student_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  student_name_.Swap(&other->student_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_StartTask::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Msg_StopTask::InitAsDefaultInstance() {
}
class Msg_StopTask::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Msg_StopTask::kReasonFieldNumber;
const int Msg_StopTask::kReasonTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Msg_StopTask::Msg_StopTask()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.Msg_StopTask)
}
Msg_StopTask::Msg_StopTask(const Msg_StopTask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reason_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.reason_text().size() > 0) {
    reason_text_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reason_text_);
  }
  reason_ = from.reason_;
  // @@protoc_insertion_point(copy_constructor:NetMsg.Msg_StopTask)
}

void Msg_StopTask::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Msg_StopTask_T20_5fNetMsg_2eproto.base);
  reason_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reason_ = 0;
}

Msg_StopTask::~Msg_StopTask() {
  // @@protoc_insertion_point(destructor:NetMsg.Msg_StopTask)
  SharedDtor();
}

void Msg_StopTask::SharedDtor() {
  reason_text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Msg_StopTask::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Msg_StopTask& Msg_StopTask::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Msg_StopTask_T20_5fNetMsg_2eproto.base);
  return *internal_default_instance();
}


void Msg_StopTask::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.Msg_StopTask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reason_text_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reason_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Msg_StopTask::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 reason = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          reason_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes reason_text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_reason_text(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Msg_StopTask::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.Msg_StopTask)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 reason = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &reason_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes reason_text = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_reason_text()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.Msg_StopTask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.Msg_StopTask)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Msg_StopTask::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.Msg_StopTask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 reason = 1;
  if (this->reason() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->reason(), output);
  }

  // bytes reason_text = 2;
  if (this->reason_text().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->reason_text(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NetMsg.Msg_StopTask)
}

::PROTOBUF_NAMESPACE_ID::uint8* Msg_StopTask::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.Msg_StopTask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 reason = 1;
  if (this->reason() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->reason(), target);
  }

  // bytes reason_text = 2;
  if (this->reason_text().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->reason_text(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.Msg_StopTask)
  return target;
}

size_t Msg_StopTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.Msg_StopTask)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes reason_text = 2;
  if (this->reason_text().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->reason_text());
  }

  // int32 reason = 1;
  if (this->reason() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->reason());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Msg_StopTask::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.Msg_StopTask)
  GOOGLE_DCHECK_NE(&from, this);
  const Msg_StopTask* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Msg_StopTask>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.Msg_StopTask)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.Msg_StopTask)
    MergeFrom(*source);
  }
}

void Msg_StopTask::MergeFrom(const Msg_StopTask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.Msg_StopTask)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reason_text().size() > 0) {

    reason_text_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reason_text_);
  }
  if (from.reason() != 0) {
    set_reason(from.reason());
  }
}

void Msg_StopTask::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.Msg_StopTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_StopTask::CopyFrom(const Msg_StopTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.Msg_StopTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_StopTask::IsInitialized() const {
  return true;
}

void Msg_StopTask::Swap(Msg_StopTask* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Msg_StopTask::InternalSwap(Msg_StopTask* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  reason_text_.Swap(&other->reason_text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(reason_, other->reason_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_StopTask::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Msg_TaskStepInfo::InitAsDefaultInstance() {
}
class Msg_TaskStepInfo::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Msg_TaskStepInfo::kStepIdFieldNumber;
const int Msg_TaskStepInfo::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Msg_TaskStepInfo::Msg_TaskStepInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.Msg_TaskStepInfo)
}
Msg_TaskStepInfo::Msg_TaskStepInfo(const Msg_TaskStepInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  step_id_ = from.step_id_;
  // @@protoc_insertion_point(copy_constructor:NetMsg.Msg_TaskStepInfo)
}

void Msg_TaskStepInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Msg_TaskStepInfo_T20_5fNetMsg_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  step_id_ = 0;
}

Msg_TaskStepInfo::~Msg_TaskStepInfo() {
  // @@protoc_insertion_point(destructor:NetMsg.Msg_TaskStepInfo)
  SharedDtor();
}

void Msg_TaskStepInfo::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Msg_TaskStepInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Msg_TaskStepInfo& Msg_TaskStepInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Msg_TaskStepInfo_T20_5fNetMsg_2eproto.base);
  return *internal_default_instance();
}


void Msg_TaskStepInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.Msg_TaskStepInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  step_id_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Msg_TaskStepInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 step_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          step_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_msg(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Msg_TaskStepInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.Msg_TaskStepInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 step_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &step_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes msg = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.Msg_TaskStepInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.Msg_TaskStepInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Msg_TaskStepInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.Msg_TaskStepInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 step_id = 1;
  if (this->step_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->step_id(), output);
  }

  // bytes msg = 2;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NetMsg.Msg_TaskStepInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* Msg_TaskStepInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.Msg_TaskStepInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 step_id = 1;
  if (this->step_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->step_id(), target);
  }

  // bytes msg = 2;
  if (this->msg().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.Msg_TaskStepInfo)
  return target;
}

size_t Msg_TaskStepInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.Msg_TaskStepInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes msg = 2;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->msg());
  }

  // int32 step_id = 1;
  if (this->step_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->step_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Msg_TaskStepInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.Msg_TaskStepInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const Msg_TaskStepInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Msg_TaskStepInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.Msg_TaskStepInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.Msg_TaskStepInfo)
    MergeFrom(*source);
  }
}

void Msg_TaskStepInfo::MergeFrom(const Msg_TaskStepInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.Msg_TaskStepInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.step_id() != 0) {
    set_step_id(from.step_id());
  }
}

void Msg_TaskStepInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.Msg_TaskStepInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_TaskStepInfo::CopyFrom(const Msg_TaskStepInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.Msg_TaskStepInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_TaskStepInfo::IsInitialized() const {
  return true;
}

void Msg_TaskStepInfo::Swap(Msg_TaskStepInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Msg_TaskStepInfo::InternalSwap(Msg_TaskStepInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(step_id_, other->step_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_TaskStepInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Msg_TaskOver::InitAsDefaultInstance() {
}
class Msg_TaskOver::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Msg_TaskOver::kReasonFieldNumber;
const int Msg_TaskOver::kScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Msg_TaskOver::Msg_TaskOver()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.Msg_TaskOver)
}
Msg_TaskOver::Msg_TaskOver(const Msg_TaskOver& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&reason_, &from.reason_,
    static_cast<size_t>(reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&reason_)) + sizeof(score_));
  // @@protoc_insertion_point(copy_constructor:NetMsg.Msg_TaskOver)
}

void Msg_TaskOver::SharedCtor() {
  ::memset(&reason_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&reason_)) + sizeof(score_));
}

Msg_TaskOver::~Msg_TaskOver() {
  // @@protoc_insertion_point(destructor:NetMsg.Msg_TaskOver)
  SharedDtor();
}

void Msg_TaskOver::SharedDtor() {
}

void Msg_TaskOver::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Msg_TaskOver& Msg_TaskOver::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Msg_TaskOver_T20_5fNetMsg_2eproto.base);
  return *internal_default_instance();
}


void Msg_TaskOver::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.Msg_TaskOver)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&reason_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&reason_)) + sizeof(score_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Msg_TaskOver::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 reason = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          reason_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Msg_TaskOver::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.Msg_TaskOver)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 reason = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &reason_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 score = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.Msg_TaskOver)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.Msg_TaskOver)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Msg_TaskOver::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.Msg_TaskOver)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 reason = 1;
  if (this->reason() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->reason(), output);
  }

  // int32 score = 2;
  if (this->score() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->score(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NetMsg.Msg_TaskOver)
}

::PROTOBUF_NAMESPACE_ID::uint8* Msg_TaskOver::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.Msg_TaskOver)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 reason = 1;
  if (this->reason() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->reason(), target);
  }

  // int32 score = 2;
  if (this->score() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->score(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.Msg_TaskOver)
  return target;
}

size_t Msg_TaskOver::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.Msg_TaskOver)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 reason = 1;
  if (this->reason() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->reason());
  }

  // int32 score = 2;
  if (this->score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->score());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Msg_TaskOver::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.Msg_TaskOver)
  GOOGLE_DCHECK_NE(&from, this);
  const Msg_TaskOver* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Msg_TaskOver>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.Msg_TaskOver)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.Msg_TaskOver)
    MergeFrom(*source);
  }
}

void Msg_TaskOver::MergeFrom(const Msg_TaskOver& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.Msg_TaskOver)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reason() != 0) {
    set_reason(from.reason());
  }
  if (from.score() != 0) {
    set_score(from.score());
  }
}

void Msg_TaskOver::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.Msg_TaskOver)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_TaskOver::CopyFrom(const Msg_TaskOver& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.Msg_TaskOver)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_TaskOver::IsInitialized() const {
  return true;
}

void Msg_TaskOver::Swap(Msg_TaskOver* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Msg_TaskOver::InternalSwap(Msg_TaskOver* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(reason_, other->reason_);
  swap(score_, other->score_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_TaskOver::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Msg_E::InitAsDefaultInstance() {
}
class Msg_E::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Msg_E::kYearFieldNumber;
const int Msg_E::kMonthFieldNumber;
const int Msg_E::kDayFieldNumber;
const int Msg_E::kHourFieldNumber;
const int Msg_E::kMinFieldNumber;
const int Msg_E::kSecFieldNumber;
const int Msg_E::kShellNumFieldNumber;
const int Msg_E::kIsSelfChkOrTestTxtSavedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Msg_E::Msg_E()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.Msg_E)
}
Msg_E::Msg_E(const Msg_E& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  shellnum_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.shellnum().size() > 0) {
    shellnum_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.shellnum_);
  }
  ::memcpy(&year_, &from.year_,
    static_cast<size_t>(reinterpret_cast<char*>(&isselfchkortesttxtsaved_) -
    reinterpret_cast<char*>(&year_)) + sizeof(isselfchkortesttxtsaved_));
  // @@protoc_insertion_point(copy_constructor:NetMsg.Msg_E)
}

void Msg_E::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Msg_E_T20_5fNetMsg_2eproto.base);
  shellnum_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&year_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isselfchkortesttxtsaved_) -
      reinterpret_cast<char*>(&year_)) + sizeof(isselfchkortesttxtsaved_));
}

Msg_E::~Msg_E() {
  // @@protoc_insertion_point(destructor:NetMsg.Msg_E)
  SharedDtor();
}

void Msg_E::SharedDtor() {
  shellnum_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Msg_E::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Msg_E& Msg_E::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Msg_E_T20_5fNetMsg_2eproto.base);
  return *internal_default_instance();
}


void Msg_E::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.Msg_E)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shellnum_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&year_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isselfchkortesttxtsaved_) -
      reinterpret_cast<char*>(&year_)) + sizeof(isselfchkortesttxtsaved_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Msg_E::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 year = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          year_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 month = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          month_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 day = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          day_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 hour = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          hour_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 min = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sec = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes shellNum = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_shellnum(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isSelfChkOrTestTxtSaved = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          isselfchkortesttxtsaved_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Msg_E::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.Msg_E)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 year = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &year_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 month = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &month_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 day = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &day_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 hour = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &hour_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 min = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 sec = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes shellNum = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_shellnum()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isSelfChkOrTestTxtSaved = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isselfchkortesttxtsaved_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.Msg_E)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.Msg_E)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Msg_E::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.Msg_E)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 year = 1;
  if (this->year() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->year(), output);
  }

  // int32 month = 2;
  if (this->month() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->month(), output);
  }

  // int32 day = 3;
  if (this->day() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->day(), output);
  }

  // int32 hour = 4;
  if (this->hour() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->hour(), output);
  }

  // int32 min = 5;
  if (this->min() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->min(), output);
  }

  // int32 sec = 6;
  if (this->sec() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->sec(), output);
  }

  // bytes shellNum = 7;
  if (this->shellnum().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->shellnum(), output);
  }

  // bool isSelfChkOrTestTxtSaved = 8;
  if (this->isselfchkortesttxtsaved() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(8, this->isselfchkortesttxtsaved(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NetMsg.Msg_E)
}

::PROTOBUF_NAMESPACE_ID::uint8* Msg_E::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.Msg_E)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 year = 1;
  if (this->year() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->year(), target);
  }

  // int32 month = 2;
  if (this->month() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->month(), target);
  }

  // int32 day = 3;
  if (this->day() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->day(), target);
  }

  // int32 hour = 4;
  if (this->hour() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->hour(), target);
  }

  // int32 min = 5;
  if (this->min() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->min(), target);
  }

  // int32 sec = 6;
  if (this->sec() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->sec(), target);
  }

  // bytes shellNum = 7;
  if (this->shellnum().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        7, this->shellnum(), target);
  }

  // bool isSelfChkOrTestTxtSaved = 8;
  if (this->isselfchkortesttxtsaved() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->isselfchkortesttxtsaved(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.Msg_E)
  return target;
}

size_t Msg_E::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.Msg_E)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes shellNum = 7;
  if (this->shellnum().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->shellnum());
  }

  // int32 year = 1;
  if (this->year() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->year());
  }

  // int32 month = 2;
  if (this->month() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->month());
  }

  // int32 day = 3;
  if (this->day() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->day());
  }

  // int32 hour = 4;
  if (this->hour() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->hour());
  }

  // int32 min = 5;
  if (this->min() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->min());
  }

  // int32 sec = 6;
  if (this->sec() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->sec());
  }

  // bool isSelfChkOrTestTxtSaved = 8;
  if (this->isselfchkortesttxtsaved() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Msg_E::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.Msg_E)
  GOOGLE_DCHECK_NE(&from, this);
  const Msg_E* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Msg_E>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.Msg_E)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.Msg_E)
    MergeFrom(*source);
  }
}

void Msg_E::MergeFrom(const Msg_E& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.Msg_E)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.shellnum().size() > 0) {

    shellnum_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.shellnum_);
  }
  if (from.year() != 0) {
    set_year(from.year());
  }
  if (from.month() != 0) {
    set_month(from.month());
  }
  if (from.day() != 0) {
    set_day(from.day());
  }
  if (from.hour() != 0) {
    set_hour(from.hour());
  }
  if (from.min() != 0) {
    set_min(from.min());
  }
  if (from.sec() != 0) {
    set_sec(from.sec());
  }
  if (from.isselfchkortesttxtsaved() != 0) {
    set_isselfchkortesttxtsaved(from.isselfchkortesttxtsaved());
  }
}

void Msg_E::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.Msg_E)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_E::CopyFrom(const Msg_E& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.Msg_E)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_E::IsInitialized() const {
  return true;
}

void Msg_E::Swap(Msg_E* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Msg_E::InternalSwap(Msg_E* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  shellnum_.Swap(&other->shellnum_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(year_, other->year_);
  swap(month_, other->month_);
  swap(day_, other->day_);
  swap(hour_, other->hour_);
  swap(min_, other->min_);
  swap(sec_, other->sec_);
  swap(isselfchkortesttxtsaved_, other->isselfchkortesttxtsaved_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_E::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Msg_F::InitAsDefaultInstance() {
}
class Msg_F::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Msg_F::kFuzeTypeSelectedFieldNumber;
const int Msg_F::kSerialNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Msg_F::Msg_F()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.Msg_F)
}
Msg_F::Msg_F(const Msg_F& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fuzetypeselected_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.fuzetypeselected().size() > 0) {
    fuzetypeselected_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fuzetypeselected_);
  }
  serialnum_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.serialnum().size() > 0) {
    serialnum_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.serialnum_);
  }
  // @@protoc_insertion_point(copy_constructor:NetMsg.Msg_F)
}

void Msg_F::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Msg_F_T20_5fNetMsg_2eproto.base);
  fuzetypeselected_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serialnum_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Msg_F::~Msg_F() {
  // @@protoc_insertion_point(destructor:NetMsg.Msg_F)
  SharedDtor();
}

void Msg_F::SharedDtor() {
  fuzetypeselected_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serialnum_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Msg_F::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Msg_F& Msg_F::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Msg_F_T20_5fNetMsg_2eproto.base);
  return *internal_default_instance();
}


void Msg_F::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.Msg_F)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fuzetypeselected_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serialnum_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Msg_F::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes FuzeTypeSelected = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_fuzetypeselected(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes SerialNum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_serialnum(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Msg_F::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.Msg_F)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes FuzeTypeSelected = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_fuzetypeselected()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes SerialNum = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_serialnum()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.Msg_F)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.Msg_F)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Msg_F::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.Msg_F)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes FuzeTypeSelected = 1;
  if (this->fuzetypeselected().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->fuzetypeselected(), output);
  }

  // bytes SerialNum = 2;
  if (this->serialnum().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->serialnum(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NetMsg.Msg_F)
}

::PROTOBUF_NAMESPACE_ID::uint8* Msg_F::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.Msg_F)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes FuzeTypeSelected = 1;
  if (this->fuzetypeselected().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->fuzetypeselected(), target);
  }

  // bytes SerialNum = 2;
  if (this->serialnum().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->serialnum(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.Msg_F)
  return target;
}

size_t Msg_F::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.Msg_F)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes FuzeTypeSelected = 1;
  if (this->fuzetypeselected().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->fuzetypeselected());
  }

  // bytes SerialNum = 2;
  if (this->serialnum().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->serialnum());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Msg_F::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.Msg_F)
  GOOGLE_DCHECK_NE(&from, this);
  const Msg_F* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Msg_F>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.Msg_F)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.Msg_F)
    MergeFrom(*source);
  }
}

void Msg_F::MergeFrom(const Msg_F& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.Msg_F)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.fuzetypeselected().size() > 0) {

    fuzetypeselected_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fuzetypeselected_);
  }
  if (from.serialnum().size() > 0) {

    serialnum_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.serialnum_);
  }
}

void Msg_F::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.Msg_F)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_F::CopyFrom(const Msg_F& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.Msg_F)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_F::IsInitialized() const {
  return true;
}

void Msg_F::Swap(Msg_F* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Msg_F::InternalSwap(Msg_F* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  fuzetypeselected_.Swap(&other->fuzetypeselected_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  serialnum_.Swap(&other->serialnum_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_F::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Msg_K::InitAsDefaultInstance() {
}
class Msg_K::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Msg_K::kOrderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Msg_K::Msg_K()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.Msg_K)
}
Msg_K::Msg_K(const Msg_K& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  order_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.order().size() > 0) {
    order_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.order_);
  }
  // @@protoc_insertion_point(copy_constructor:NetMsg.Msg_K)
}

void Msg_K::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Msg_K_T20_5fNetMsg_2eproto.base);
  order_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Msg_K::~Msg_K() {
  // @@protoc_insertion_point(destructor:NetMsg.Msg_K)
  SharedDtor();
}

void Msg_K::SharedDtor() {
  order_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Msg_K::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Msg_K& Msg_K::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Msg_K_T20_5fNetMsg_2eproto.base);
  return *internal_default_instance();
}


void Msg_K::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.Msg_K)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  order_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Msg_K::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes order = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_order(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Msg_K::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.Msg_K)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes order = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_order()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.Msg_K)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.Msg_K)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Msg_K::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.Msg_K)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes order = 1;
  if (this->order().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->order(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NetMsg.Msg_K)
}

::PROTOBUF_NAMESPACE_ID::uint8* Msg_K::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.Msg_K)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes order = 1;
  if (this->order().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->order(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.Msg_K)
  return target;
}

size_t Msg_K::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.Msg_K)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes order = 1;
  if (this->order().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->order());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Msg_K::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.Msg_K)
  GOOGLE_DCHECK_NE(&from, this);
  const Msg_K* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Msg_K>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.Msg_K)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.Msg_K)
    MergeFrom(*source);
  }
}

void Msg_K::MergeFrom(const Msg_K& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.Msg_K)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.order().size() > 0) {

    order_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.order_);
  }
}

void Msg_K::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.Msg_K)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_K::CopyFrom(const Msg_K& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.Msg_K)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_K::IsInitialized() const {
  return true;
}

void Msg_K::Swap(Msg_K* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Msg_K::InternalSwap(Msg_K* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  order_.Swap(&other->order_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_K::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Msg_BD::InitAsDefaultInstance() {
}
class Msg_BD::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Msg_BD::Msg_BD()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.Msg_BD)
}
Msg_BD::Msg_BD(const Msg_BD& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:NetMsg.Msg_BD)
}

void Msg_BD::SharedCtor() {
}

Msg_BD::~Msg_BD() {
  // @@protoc_insertion_point(destructor:NetMsg.Msg_BD)
  SharedDtor();
}

void Msg_BD::SharedDtor() {
}

void Msg_BD::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Msg_BD& Msg_BD::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Msg_BD_T20_5fNetMsg_2eproto.base);
  return *internal_default_instance();
}


void Msg_BD::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.Msg_BD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Msg_BD::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Msg_BD::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.Msg_BD)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.Msg_BD)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.Msg_BD)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Msg_BD::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.Msg_BD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NetMsg.Msg_BD)
}

::PROTOBUF_NAMESPACE_ID::uint8* Msg_BD::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.Msg_BD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.Msg_BD)
  return target;
}

size_t Msg_BD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.Msg_BD)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Msg_BD::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.Msg_BD)
  GOOGLE_DCHECK_NE(&from, this);
  const Msg_BD* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Msg_BD>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.Msg_BD)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.Msg_BD)
    MergeFrom(*source);
  }
}

void Msg_BD::MergeFrom(const Msg_BD& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.Msg_BD)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Msg_BD::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.Msg_BD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_BD::CopyFrom(const Msg_BD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.Msg_BD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_BD::IsInitialized() const {
  return true;
}

void Msg_BD::Swap(Msg_BD* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Msg_BD::InternalSwap(Msg_BD* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_BD::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Msg_T_Online_Device::InitAsDefaultInstance() {
}
class Msg_T_Online_Device::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Msg_T_Online_Device::kOnlineflagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Msg_T_Online_Device::Msg_T_Online_Device()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMsg.Msg_T_Online_Device)
}
Msg_T_Online_Device::Msg_T_Online_Device(const Msg_T_Online_Device& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  onlineflag_ = from.onlineflag_;
  // @@protoc_insertion_point(copy_constructor:NetMsg.Msg_T_Online_Device)
}

void Msg_T_Online_Device::SharedCtor() {
  onlineflag_ = 0;
}

Msg_T_Online_Device::~Msg_T_Online_Device() {
  // @@protoc_insertion_point(destructor:NetMsg.Msg_T_Online_Device)
  SharedDtor();
}

void Msg_T_Online_Device::SharedDtor() {
}

void Msg_T_Online_Device::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Msg_T_Online_Device& Msg_T_Online_Device::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Msg_T_Online_Device_T20_5fNetMsg_2eproto.base);
  return *internal_default_instance();
}


void Msg_T_Online_Device::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMsg.Msg_T_Online_Device)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  onlineflag_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Msg_T_Online_Device::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 onlineflag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          onlineflag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Msg_T_Online_Device::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMsg.Msg_T_Online_Device)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 onlineflag = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &onlineflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMsg.Msg_T_Online_Device)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMsg.Msg_T_Online_Device)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Msg_T_Online_Device::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMsg.Msg_T_Online_Device)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 onlineflag = 1;
  if (this->onlineflag() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->onlineflag(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NetMsg.Msg_T_Online_Device)
}

::PROTOBUF_NAMESPACE_ID::uint8* Msg_T_Online_Device::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetMsg.Msg_T_Online_Device)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 onlineflag = 1;
  if (this->onlineflag() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->onlineflag(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NetMsg.Msg_T_Online_Device)
  return target;
}

size_t Msg_T_Online_Device::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMsg.Msg_T_Online_Device)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 onlineflag = 1;
  if (this->onlineflag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->onlineflag());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Msg_T_Online_Device::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMsg.Msg_T_Online_Device)
  GOOGLE_DCHECK_NE(&from, this);
  const Msg_T_Online_Device* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Msg_T_Online_Device>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMsg.Msg_T_Online_Device)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMsg.Msg_T_Online_Device)
    MergeFrom(*source);
  }
}

void Msg_T_Online_Device::MergeFrom(const Msg_T_Online_Device& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMsg.Msg_T_Online_Device)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.onlineflag() != 0) {
    set_onlineflag(from.onlineflag());
  }
}

void Msg_T_Online_Device::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMsg.Msg_T_Online_Device)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_T_Online_Device::CopyFrom(const Msg_T_Online_Device& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMsg.Msg_T_Online_Device)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_T_Online_Device::IsInitialized() const {
  return true;
}

void Msg_T_Online_Device::Swap(Msg_T_Online_Device* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Msg_T_Online_Device::InternalSwap(Msg_T_Online_Device* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(onlineflag_, other->onlineflag_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_T_Online_Device::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace NetMsg
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::NetMsg::Msg_AskRegDC* Arena::CreateMaybeMessage< ::NetMsg::Msg_AskRegDC >(Arena* arena) {
  return Arena::CreateInternal< ::NetMsg::Msg_AskRegDC >(arena);
}
template<> PROTOBUF_NOINLINE ::NetMsg::Msg_RespRegDC* Arena::CreateMaybeMessage< ::NetMsg::Msg_RespRegDC >(Arena* arena) {
  return Arena::CreateInternal< ::NetMsg::Msg_RespRegDC >(arena);
}
template<> PROTOBUF_NOINLINE ::NetMsg::Msg_AskLogin* Arena::CreateMaybeMessage< ::NetMsg::Msg_AskLogin >(Arena* arena) {
  return Arena::CreateInternal< ::NetMsg::Msg_AskLogin >(arena);
}
template<> PROTOBUF_NOINLINE ::NetMsg::Msg_RespLogin* Arena::CreateMaybeMessage< ::NetMsg::Msg_RespLogin >(Arena* arena) {
  return Arena::CreateInternal< ::NetMsg::Msg_RespLogin >(arena);
}
template<> PROTOBUF_NOINLINE ::NetMsg::Msg_AskLogout* Arena::CreateMaybeMessage< ::NetMsg::Msg_AskLogout >(Arena* arena) {
  return Arena::CreateInternal< ::NetMsg::Msg_AskLogout >(arena);
}
template<> PROTOBUF_NOINLINE ::NetMsg::Msg_RespLogout* Arena::CreateMaybeMessage< ::NetMsg::Msg_RespLogout >(Arena* arena) {
  return Arena::CreateInternal< ::NetMsg::Msg_RespLogout >(arena);
}
template<> PROTOBUF_NOINLINE ::NetMsg::Msg_Message* Arena::CreateMaybeMessage< ::NetMsg::Msg_Message >(Arena* arena) {
  return Arena::CreateInternal< ::NetMsg::Msg_Message >(arena);
}
template<> PROTOBUF_NOINLINE ::NetMsg::Lession* Arena::CreateMaybeMessage< ::NetMsg::Lession >(Arena* arena) {
  return Arena::CreateInternal< ::NetMsg::Lession >(arena);
}
template<> PROTOBUF_NOINLINE ::NetMsg::Msg_StartTask* Arena::CreateMaybeMessage< ::NetMsg::Msg_StartTask >(Arena* arena) {
  return Arena::CreateInternal< ::NetMsg::Msg_StartTask >(arena);
}
template<> PROTOBUF_NOINLINE ::NetMsg::Msg_StopTask* Arena::CreateMaybeMessage< ::NetMsg::Msg_StopTask >(Arena* arena) {
  return Arena::CreateInternal< ::NetMsg::Msg_StopTask >(arena);
}
template<> PROTOBUF_NOINLINE ::NetMsg::Msg_TaskStepInfo* Arena::CreateMaybeMessage< ::NetMsg::Msg_TaskStepInfo >(Arena* arena) {
  return Arena::CreateInternal< ::NetMsg::Msg_TaskStepInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::NetMsg::Msg_TaskOver* Arena::CreateMaybeMessage< ::NetMsg::Msg_TaskOver >(Arena* arena) {
  return Arena::CreateInternal< ::NetMsg::Msg_TaskOver >(arena);
}
template<> PROTOBUF_NOINLINE ::NetMsg::Msg_E* Arena::CreateMaybeMessage< ::NetMsg::Msg_E >(Arena* arena) {
  return Arena::CreateInternal< ::NetMsg::Msg_E >(arena);
}
template<> PROTOBUF_NOINLINE ::NetMsg::Msg_F* Arena::CreateMaybeMessage< ::NetMsg::Msg_F >(Arena* arena) {
  return Arena::CreateInternal< ::NetMsg::Msg_F >(arena);
}
template<> PROTOBUF_NOINLINE ::NetMsg::Msg_K* Arena::CreateMaybeMessage< ::NetMsg::Msg_K >(Arena* arena) {
  return Arena::CreateInternal< ::NetMsg::Msg_K >(arena);
}
template<> PROTOBUF_NOINLINE ::NetMsg::Msg_BD* Arena::CreateMaybeMessage< ::NetMsg::Msg_BD >(Arena* arena) {
  return Arena::CreateInternal< ::NetMsg::Msg_BD >(arena);
}
template<> PROTOBUF_NOINLINE ::NetMsg::Msg_T_Online_Device* Arena::CreateMaybeMessage< ::NetMsg::Msg_T_Online_Device >(Arena* arena) {
  return Arena::CreateInternal< ::NetMsg::Msg_T_Online_Device >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
