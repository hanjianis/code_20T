// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: T20_NetMsg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_T20_5fNetMsg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_T20_5fNetMsg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_T20_5fNetMsg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_T20_5fNetMsg_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[17]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_T20_5fNetMsg_2eproto;
namespace NetMsg {
class Lession;
class LessionDefaultTypeInternal;
extern LessionDefaultTypeInternal _Lession_default_instance_;
class Msg_AskLogin;
class Msg_AskLoginDefaultTypeInternal;
extern Msg_AskLoginDefaultTypeInternal _Msg_AskLogin_default_instance_;
class Msg_AskLogout;
class Msg_AskLogoutDefaultTypeInternal;
extern Msg_AskLogoutDefaultTypeInternal _Msg_AskLogout_default_instance_;
class Msg_AskRegDC;
class Msg_AskRegDCDefaultTypeInternal;
extern Msg_AskRegDCDefaultTypeInternal _Msg_AskRegDC_default_instance_;
class Msg_BD;
class Msg_BDDefaultTypeInternal;
extern Msg_BDDefaultTypeInternal _Msg_BD_default_instance_;
class Msg_E;
class Msg_EDefaultTypeInternal;
extern Msg_EDefaultTypeInternal _Msg_E_default_instance_;
class Msg_F;
class Msg_FDefaultTypeInternal;
extern Msg_FDefaultTypeInternal _Msg_F_default_instance_;
class Msg_K;
class Msg_KDefaultTypeInternal;
extern Msg_KDefaultTypeInternal _Msg_K_default_instance_;
class Msg_Message;
class Msg_MessageDefaultTypeInternal;
extern Msg_MessageDefaultTypeInternal _Msg_Message_default_instance_;
class Msg_RespLogin;
class Msg_RespLoginDefaultTypeInternal;
extern Msg_RespLoginDefaultTypeInternal _Msg_RespLogin_default_instance_;
class Msg_RespLogout;
class Msg_RespLogoutDefaultTypeInternal;
extern Msg_RespLogoutDefaultTypeInternal _Msg_RespLogout_default_instance_;
class Msg_RespRegDC;
class Msg_RespRegDCDefaultTypeInternal;
extern Msg_RespRegDCDefaultTypeInternal _Msg_RespRegDC_default_instance_;
class Msg_StartTask;
class Msg_StartTaskDefaultTypeInternal;
extern Msg_StartTaskDefaultTypeInternal _Msg_StartTask_default_instance_;
class Msg_StopTask;
class Msg_StopTaskDefaultTypeInternal;
extern Msg_StopTaskDefaultTypeInternal _Msg_StopTask_default_instance_;
class Msg_T_Online_Device;
class Msg_T_Online_DeviceDefaultTypeInternal;
extern Msg_T_Online_DeviceDefaultTypeInternal _Msg_T_Online_Device_default_instance_;
class Msg_TaskOver;
class Msg_TaskOverDefaultTypeInternal;
extern Msg_TaskOverDefaultTypeInternal _Msg_TaskOver_default_instance_;
class Msg_TaskStepInfo;
class Msg_TaskStepInfoDefaultTypeInternal;
extern Msg_TaskStepInfoDefaultTypeInternal _Msg_TaskStepInfo_default_instance_;
}  // namespace NetMsg
PROTOBUF_NAMESPACE_OPEN
template<> ::NetMsg::Lession* Arena::CreateMaybeMessage<::NetMsg::Lession>(Arena*);
template<> ::NetMsg::Msg_AskLogin* Arena::CreateMaybeMessage<::NetMsg::Msg_AskLogin>(Arena*);
template<> ::NetMsg::Msg_AskLogout* Arena::CreateMaybeMessage<::NetMsg::Msg_AskLogout>(Arena*);
template<> ::NetMsg::Msg_AskRegDC* Arena::CreateMaybeMessage<::NetMsg::Msg_AskRegDC>(Arena*);
template<> ::NetMsg::Msg_BD* Arena::CreateMaybeMessage<::NetMsg::Msg_BD>(Arena*);
template<> ::NetMsg::Msg_E* Arena::CreateMaybeMessage<::NetMsg::Msg_E>(Arena*);
template<> ::NetMsg::Msg_F* Arena::CreateMaybeMessage<::NetMsg::Msg_F>(Arena*);
template<> ::NetMsg::Msg_K* Arena::CreateMaybeMessage<::NetMsg::Msg_K>(Arena*);
template<> ::NetMsg::Msg_Message* Arena::CreateMaybeMessage<::NetMsg::Msg_Message>(Arena*);
template<> ::NetMsg::Msg_RespLogin* Arena::CreateMaybeMessage<::NetMsg::Msg_RespLogin>(Arena*);
template<> ::NetMsg::Msg_RespLogout* Arena::CreateMaybeMessage<::NetMsg::Msg_RespLogout>(Arena*);
template<> ::NetMsg::Msg_RespRegDC* Arena::CreateMaybeMessage<::NetMsg::Msg_RespRegDC>(Arena*);
template<> ::NetMsg::Msg_StartTask* Arena::CreateMaybeMessage<::NetMsg::Msg_StartTask>(Arena*);
template<> ::NetMsg::Msg_StopTask* Arena::CreateMaybeMessage<::NetMsg::Msg_StopTask>(Arena*);
template<> ::NetMsg::Msg_T_Online_Device* Arena::CreateMaybeMessage<::NetMsg::Msg_T_Online_Device>(Arena*);
template<> ::NetMsg::Msg_TaskOver* Arena::CreateMaybeMessage<::NetMsg::Msg_TaskOver>(Arena*);
template<> ::NetMsg::Msg_TaskStepInfo* Arena::CreateMaybeMessage<::NetMsg::Msg_TaskStepInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace NetMsg {

enum MsgID : int {
  eMsg_Reserve = 0,
  eMsg_AskRegDC = 1,
  eMsg_RespRegDC = 2,
  eMsg_AskLogin = 3,
  eMsg_RespLogin = 4,
  eMsg_AskLogout = 5,
  eMsg_RespLogout = 6,
  eMsg_Message = 7,
  eMsg_StartTask = 20,
  eMsg_StopTask = 21,
  eMsg_TaskStepInfo = 22,
  eMsg_TaskOver = 23,
  eMsg_TaskScore = 24,
  eMsg_T_OnAppStart = 101,
  eMsg_T_OnSelectMissileType = 102,
  eMsg_T_OnInputDCCode = 103,
  eMsg_T_OnInputTemperature = 104,
  eMsg_T_OnFlashlightWork = 105,
  eMsg_T_OnSelfCheck = 106,
  eMsg_T_OnItemTest = 107,
  eMsg_T_OnComprehensiveTest = 108,
  eMsg_T_OnINS = 109,
  eMsg_T_OnTestStart = 110,
  eMsg_T_OnTestOver = 111,
  eMsg_T_OnCloseWndTest = 112,
  eMsg_T_OnCloseApp = 113,
  eMsg_T_OnLine_Device = 114,
  eMsg_E_OnAppStart = 200,
  eMsg_E_GetSysTime = 201,
  eMsg_E_SysTime = 202,
  eMsg_E_OnEnterSelfTest = 203,
  eMsg_E_TestFinished = 204,
  eMsg_E_LinkEH01OK = 205,
  eMsg_E_LinkEH01NotOK = 206,
  eMsg_E_OnInputDCCode = 207,
  eMsg_E_OnSelectAuto = 208,
  eMsg_E_OnSelectBridgeR = 209,
  eMsg_E_OnSelectResistR = 210,
  eMsg_E_OnEnterWndTest = 211,
  eMsg_E_OnCloseWndTest = 212,
  eMsg_E_SaveHisTxt = 213,
  eMsg_E_OnCloseApp = 214,
  eMsg_F_OnAppStart = 300,
  eMsg_F_OnSelectFuzeType = 301,
  eMsg_F_OnInputDCCode = 302,
  eMsg_F_OnClickBtnStartTest = 303,
  eMsg_F_OnTestOver = 304,
  eMsg_F_OnCloseWndTest = 305,
  eMsg_F_OnCloseApp = 306,
  eMsg_K_OnAppStart = 401,
  eMsg_K_OnEntermon = 402,
  eMsg_K_OnInputCmd = 403,
  eMsg_K_OnInputK1 = 404,
  eMsg_K_OnInputA20000 = 405,
  eMsg_K_OnInputFP = 406,
  eMsg_K_OnInputK2 = 407,
  eMsg_K_OnInputQ = 408,
  eMsg_K_OnInputUnkownOrder = 459,
  eMsg_K_OnCloseApp = 450,
  eMsg_DB_OnAppStart = 501,
  eMsg_DB_OnSelectAutoTest = 502,
  eMsg_DB_OnCloseWndInitBindData = 503,
  eMsg_DB_OnCloseWndKPH01K_CW = 504,
  eMsg_DB_OnEnterCourseAlignment = 505,
  eMsg_DB_OnCourseAlignmentData = 506,
  eMsg_DB_OnClickNavigation = 507,
  eMsg_DB_OnClickAlignment = 508,
  eMsg_DB_OnEnterCourseCalibrationNavigation = 509,
  eMsg_DB_OnClickCancel = 510,
  eMsg_DB_OnCloseApp = 511,
  eMsg_X2_OnAppStart = 601,
  eMsg_X2_OnSelectAutoTest = 602,
  eMsg_X2_OnEnterWndInitBindData = 603,
  eMsg_X2_OnCloseWndInitBindData = 604,
  eMsg_X2_OnCloseWndKDH01K_CW = 605,
  eMsg_X2_OnEnterAlignment = 606,
  eMsg_X2_OnCloseAlignment = 607,
  eMsg_X2_OnEnterNavigation = 608,
  eMsg_X2_OnCloseNavigation = 609,
  eMsg_X2_OnCloseApp = 610,
  eMsg_X2_OnEnterKPHSysSelfTest = 611,
  eMsg_X2_OnCloseKPHSysSelfTest = 612,
  eMsg_X2_OnTimerAlignmentData = 613,
  eMsg_EP_OnAppStart = 701,
  eMsg_EP_OnSelectReadEEPROM = 702,
  eMsg_EP_OnEnterWndKDHStatus1 = 703,
  eMsg_EP_OnEnterWndKDHStatus2 = 704,
  eMsg_EP_OnEnterWndKDHStatus3 = 705,
  eMsg_EP_OnEnterWndParmBack = 706,
  eMsg_EP_OnCloseApp = 707,
  eMsg_EP_OnSelectWriteEEPROM = 710,
  eMsg_EP_OnEnterOpenIniFile = 711,
  eMsg_EP_OnEnterCloseIniFile = 712,
  eMsg_EP_OnEnterCalibrateParmP1 = 713,
  eMsg_EP_OnEnterCalibrateParmP2 = 714,
  eMsg_EP_OnEnterCalibrateParmP3 = 715,
  eMsg_EP_OnEnterCalibrateParmP4 = 716,
  eMsg_EP_OnCloseWndKDHStatus = 717,
  eMsg_EK_OnAppStart = 801,
  eMsg_EK_OnEnterWndAlert = 802,
  eMsg_EK_OnCloseWndAlert = 803,
  eMsg_EK_OnSelectShellCalibration = 804,
  eMsg_EK_OnEnterWndCalibrationDataProcessing = 805,
  eMsg_EK_OnCloseWndCalibrationDataProcessing = 806,
  eMsg_EK_OnEnterWndCalibrationDataResult = 807,
  eMsg_EK_OnCloseWndCalibrationDataResult = 808,
  eMsg_EK_OnEnterWndOpenDataFile1 = 809,
  eMsg_EK_OnCloseWndOpenDataFile1 = 810,
  eMsg_EK_OnEnterWndSaveResult = 811,
  eMsg_EK_OnCloseWndSaveResult = 812,
  eMsg_EK_VGC_OnSelectVGC = 813,
  eMsg_EK_VGC_OnEnterWndVGCDataProcessing = 814,
  eMsg_EK_VGC_OnCloseWndVGCDataProcessing = 815,
  eMsg_EK_VGC_OnEnterWndVGCResult = 816,
  eMsg_EK_VGC_OnCloseWndVGCResult = 817,
  eMsg_EK_OnSelectHGC = 818,
  eMsg_EK_OnEnterWndHGCDataProcessing = 819,
  eMsg_EK_OnCloseWndHGCDataProcessing = 820,
  eMsg_EK_OnEnterWndHGCResult = 821,
  eMsg_EK_OnCloseWndHGCResult = 822,
  eMsg_EK_OnSelectAC = 834,
  eMsg_EK_OnEnterWndSBTDataProcessing = 823,
  eMsg_EK_OnCloseWndSBTDataProcessing = 824,
  eMsg_EK_OnSelectIFBoard = 825,
  eMsg_EK_OnEnterWndACDataProcessingIF = 826,
  eMsg_EK_OnSelectAddTableG = 827,
  eMsg_EK_OnEnterWndACGCDataProcessingIF = 828,
  eMsg_EK_OnCloseWndACGCDataProcessingIF = 829,
  eMsg_EK_OnEnterWndACGCResult = 830,
  eMsg_EK_OnEnterWndVGCResult = 831,
  eMsg_EK_OnCloseWndVGCResult = 832,
  eMsg_EK_OnCloseApp = 833,
  eMsg_Y2_OnAppStart = 901,
  eMsg_Y2_OnEnterWndFailSafeSetting = 902,
  eMsg_Y2_OnCloseWndFailSafeSetting = 903,
  eMsg_Y2_OnSelectSingleTest = 904,
  eMsg_Y2_OnEnterWndSingleTest = 905,
  eMsg_Y2_OnCloseWndSingleTest = 906,
  eMsg_Y2_OnClickBtnNavigation = 907,
  eMsg_Y2_OnClickBtnAlignment = 908,
  eMsg_Y2_OnEnterWndNavigation = 909,
  eMsg_Y2_OnCloseWndNavigation = 910,
  eMsg_Y2_OnEnterWndKDHStatus = 911,
  eMsg_Y2_OnCloseWndKDHStatus = 912,
  eMsg_Y2_OnCloseApp = 913,
  eMsg_J2_OnAppStart = 1001,
  eMsg_J2_OnSelectSingleTest = 1002,
  eMsg_J2_OnEnterWndKDHSysSelfTest = 1003,
  eMsg_J2_OnCloseWndKDHSysSelfTest = 1004,
  eMsg_J2_OnEnterWndInitBindData = 1005,
  eMsg_J2_OnCloseWndInitBindData = 1006,
  eMsg_J2_OnEnterWndBackMsg = 1007,
  eMsg_J2_OnCloseWndBackMsg = 1008,
  eMsg_J2_OnEnterWndSysCW = 1009,
  eMsg_J2_OnCloseWndSysCW = 1010,
  eMsg_J2_OnEnterWndTestAlignment = 1011,
  eMsg_J2_OnCloseWndTestAlignment = 1012,
  eMsg_J2_OnEnterWndTestNavigation = 1013,
  eMsg_J2_OnCloseWndTestNavigation = 1014,
  eMsg_J2_OnCloseApp = 1015,
  MsgID_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MsgID_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MsgID_IsValid(int value);
constexpr MsgID MsgID_MIN = eMsg_Reserve;
constexpr MsgID MsgID_MAX = eMsg_J2_OnCloseApp;
constexpr int MsgID_ARRAYSIZE = MsgID_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MsgID_descriptor();
template<typename T>
inline const std::string& MsgID_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MsgID>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MsgID_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MsgID_descriptor(), enum_t_value);
}
inline bool MsgID_Parse(
    const std::string& name, MsgID* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MsgID>(
    MsgID_descriptor(), name, value);
}
enum DCType : int {
  DCType_None = 0,
  DCType_Test = 1,
  DCType_EED = 2,
  DCType_Fuze = 3,
  DCType_INS1 = 4,
  DCType_INS2 = 5,
  DCType_Oil = 6,
  DCType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DCType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DCType_IsValid(int value);
constexpr DCType DCType_MIN = DCType_None;
constexpr DCType DCType_MAX = DCType_Oil;
constexpr int DCType_ARRAYSIZE = DCType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DCType_descriptor();
template<typename T>
inline const std::string& DCType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DCType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DCType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DCType_descriptor(), enum_t_value);
}
inline bool DCType_Parse(
    const std::string& name, DCType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DCType>(
    DCType_descriptor(), name, value);
}
enum SelfCheck20T : int {
  SelfCheck20T_Channel = 0,
  SelfCheck20T_422 = 1,
  SelfCheck20T_ProgramControlledEquipment = 2,
  SelfCheck20T_IntegratedPower = 3,
  SelfCheck20T_MFPower = 4,
  SelfCheck20T_Atmosphere = 5,
  SelfCheck20T_Altimeter = 6,
  SelfCheck20T_GPS = 7,
  SelfCheck20T_Scene = 8,
  SelfCheck20T_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SelfCheck20T_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SelfCheck20T_IsValid(int value);
constexpr SelfCheck20T SelfCheck20T_MIN = SelfCheck20T_Channel;
constexpr SelfCheck20T SelfCheck20T_MAX = SelfCheck20T_Scene;
constexpr int SelfCheck20T_ARRAYSIZE = SelfCheck20T_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SelfCheck20T_descriptor();
template<typename T>
inline const std::string& SelfCheck20T_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SelfCheck20T>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SelfCheck20T_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SelfCheck20T_descriptor(), enum_t_value);
}
inline bool SelfCheck20T_Parse(
    const std::string& name, SelfCheck20T* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SelfCheck20T>(
    SelfCheck20T_descriptor(), name, value);
}
enum ItemTest20T : int {
  ItemTest20T_FlightControlParameters = 0,
  ItemTest20T_ParallelInterface = 1,
  ItemTest20T_SerialPort = 2,
  ItemTest20T_AirPressure = 3,
  ItemTest20T_DPU = 4,
  ItemTest20T_Altimeter = 5,
  ItemTest20T_PropulsionSystem = 6,
  ItemTest20T_Rudder = 7,
  ItemTest20T_OilLevel = 8,
  ItemTest20T_Scene = 9,
  ItemTest20T_Lighting = 10,
  ItemTest20T_ElectricSystem = 11,
  ItemTest20T_Fuze = 12,
  ItemTest20T_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ItemTest20T_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ItemTest20T_IsValid(int value);
constexpr ItemTest20T ItemTest20T_MIN = ItemTest20T_FlightControlParameters;
constexpr ItemTest20T ItemTest20T_MAX = ItemTest20T_Fuze;
constexpr int ItemTest20T_ARRAYSIZE = ItemTest20T_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ItemTest20T_descriptor();
template<typename T>
inline const std::string& ItemTest20T_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ItemTest20T>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ItemTest20T_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ItemTest20T_descriptor(), enum_t_value);
}
inline bool ItemTest20T_Parse(
    const std::string& name, ItemTest20T* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ItemTest20T>(
    ItemTest20T_descriptor(), name, value);
}
// ===================================================================

class Msg_AskRegDC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NetMsg.Msg_AskRegDC) */ {
 public:
  Msg_AskRegDC();
  virtual ~Msg_AskRegDC();

  Msg_AskRegDC(const Msg_AskRegDC& from);
  Msg_AskRegDC(Msg_AskRegDC&& from) noexcept
    : Msg_AskRegDC() {
    *this = ::std::move(from);
  }

  inline Msg_AskRegDC& operator=(const Msg_AskRegDC& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_AskRegDC& operator=(Msg_AskRegDC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Msg_AskRegDC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Msg_AskRegDC* internal_default_instance() {
    return reinterpret_cast<const Msg_AskRegDC*>(
               &_Msg_AskRegDC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Msg_AskRegDC* other);
  friend void swap(Msg_AskRegDC& a, Msg_AskRegDC& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Msg_AskRegDC* New() const final {
    return CreateMaybeMessage<Msg_AskRegDC>(nullptr);
  }

  Msg_AskRegDC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Msg_AskRegDC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Msg_AskRegDC& from);
  void MergeFrom(const Msg_AskRegDC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_AskRegDC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NetMsg.Msg_AskRegDC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_T20_5fNetMsg_2eproto);
    return ::descriptor_table_T20_5fNetMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const void* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);

  // uint32 version = 2;
  void clear_version();
  static const int kVersionFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // .NetMsg.DCType dc_type = 3;
  void clear_dc_type();
  static const int kDcTypeFieldNumber = 3;
  ::NetMsg::DCType dc_type() const;
  void set_dc_type(::NetMsg::DCType value);

  // @@protoc_insertion_point(class_scope:NetMsg.Msg_AskRegDC)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_;
  int dc_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_T20_5fNetMsg_2eproto;
};
// -------------------------------------------------------------------

class Msg_RespRegDC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NetMsg.Msg_RespRegDC) */ {
 public:
  Msg_RespRegDC();
  virtual ~Msg_RespRegDC();

  Msg_RespRegDC(const Msg_RespRegDC& from);
  Msg_RespRegDC(Msg_RespRegDC&& from) noexcept
    : Msg_RespRegDC() {
    *this = ::std::move(from);
  }

  inline Msg_RespRegDC& operator=(const Msg_RespRegDC& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_RespRegDC& operator=(Msg_RespRegDC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Msg_RespRegDC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Msg_RespRegDC* internal_default_instance() {
    return reinterpret_cast<const Msg_RespRegDC*>(
               &_Msg_RespRegDC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Msg_RespRegDC* other);
  friend void swap(Msg_RespRegDC& a, Msg_RespRegDC& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Msg_RespRegDC* New() const final {
    return CreateMaybeMessage<Msg_RespRegDC>(nullptr);
  }

  Msg_RespRegDC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Msg_RespRegDC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Msg_RespRegDC& from);
  void MergeFrom(const Msg_RespRegDC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_RespRegDC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NetMsg.Msg_RespRegDC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_T20_5fNetMsg_2eproto);
    return ::descriptor_table_T20_5fNetMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes timestamp = 2;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  const std::string& timestamp() const;
  void set_timestamp(const std::string& value);
  void set_timestamp(std::string&& value);
  void set_timestamp(const char* value);
  void set_timestamp(const void* value, size_t size);
  std::string* mutable_timestamp();
  std::string* release_timestamp();
  void set_allocated_timestamp(std::string* timestamp);

  // int32 result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:NetMsg.Msg_RespRegDC)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_T20_5fNetMsg_2eproto;
};
// -------------------------------------------------------------------

class Msg_AskLogin :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NetMsg.Msg_AskLogin) */ {
 public:
  Msg_AskLogin();
  virtual ~Msg_AskLogin();

  Msg_AskLogin(const Msg_AskLogin& from);
  Msg_AskLogin(Msg_AskLogin&& from) noexcept
    : Msg_AskLogin() {
    *this = ::std::move(from);
  }

  inline Msg_AskLogin& operator=(const Msg_AskLogin& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_AskLogin& operator=(Msg_AskLogin&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Msg_AskLogin& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Msg_AskLogin* internal_default_instance() {
    return reinterpret_cast<const Msg_AskLogin*>(
               &_Msg_AskLogin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Msg_AskLogin* other);
  friend void swap(Msg_AskLogin& a, Msg_AskLogin& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Msg_AskLogin* New() const final {
    return CreateMaybeMessage<Msg_AskLogin>(nullptr);
  }

  Msg_AskLogin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Msg_AskLogin>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Msg_AskLogin& from);
  void MergeFrom(const Msg_AskLogin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_AskLogin* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NetMsg.Msg_AskLogin";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_T20_5fNetMsg_2eproto);
    return ::descriptor_table_T20_5fNetMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes user_name = 1;
  void clear_user_name();
  static const int kUserNameFieldNumber = 1;
  const std::string& user_name() const;
  void set_user_name(const std::string& value);
  void set_user_name(std::string&& value);
  void set_user_name(const char* value);
  void set_user_name(const void* value, size_t size);
  std::string* mutable_user_name();
  std::string* release_user_name();
  void set_allocated_user_name(std::string* user_name);

  // bytes password = 2;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const void* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);

  // @@protoc_insertion_point(class_scope:NetMsg.Msg_AskLogin)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_T20_5fNetMsg_2eproto;
};
// -------------------------------------------------------------------

class Msg_RespLogin :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NetMsg.Msg_RespLogin) */ {
 public:
  Msg_RespLogin();
  virtual ~Msg_RespLogin();

  Msg_RespLogin(const Msg_RespLogin& from);
  Msg_RespLogin(Msg_RespLogin&& from) noexcept
    : Msg_RespLogin() {
    *this = ::std::move(from);
  }

  inline Msg_RespLogin& operator=(const Msg_RespLogin& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_RespLogin& operator=(Msg_RespLogin&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Msg_RespLogin& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Msg_RespLogin* internal_default_instance() {
    return reinterpret_cast<const Msg_RespLogin*>(
               &_Msg_RespLogin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Msg_RespLogin* other);
  friend void swap(Msg_RespLogin& a, Msg_RespLogin& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Msg_RespLogin* New() const final {
    return CreateMaybeMessage<Msg_RespLogin>(nullptr);
  }

  Msg_RespLogin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Msg_RespLogin>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Msg_RespLogin& from);
  void MergeFrom(const Msg_RespLogin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_RespLogin* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NetMsg.Msg_RespLogin";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_T20_5fNetMsg_2eproto);
    return ::descriptor_table_T20_5fNetMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes timestamp = 2;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  const std::string& timestamp() const;
  void set_timestamp(const std::string& value);
  void set_timestamp(std::string&& value);
  void set_timestamp(const char* value);
  void set_timestamp(const void* value, size_t size);
  std::string* mutable_timestamp();
  std::string* release_timestamp();
  void set_allocated_timestamp(std::string* timestamp);

  // int32 result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:NetMsg.Msg_RespLogin)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_T20_5fNetMsg_2eproto;
};
// -------------------------------------------------------------------

class Msg_AskLogout :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NetMsg.Msg_AskLogout) */ {
 public:
  Msg_AskLogout();
  virtual ~Msg_AskLogout();

  Msg_AskLogout(const Msg_AskLogout& from);
  Msg_AskLogout(Msg_AskLogout&& from) noexcept
    : Msg_AskLogout() {
    *this = ::std::move(from);
  }

  inline Msg_AskLogout& operator=(const Msg_AskLogout& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_AskLogout& operator=(Msg_AskLogout&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Msg_AskLogout& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Msg_AskLogout* internal_default_instance() {
    return reinterpret_cast<const Msg_AskLogout*>(
               &_Msg_AskLogout_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Msg_AskLogout* other);
  friend void swap(Msg_AskLogout& a, Msg_AskLogout& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Msg_AskLogout* New() const final {
    return CreateMaybeMessage<Msg_AskLogout>(nullptr);
  }

  Msg_AskLogout* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Msg_AskLogout>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Msg_AskLogout& from);
  void MergeFrom(const Msg_AskLogout& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_AskLogout* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NetMsg.Msg_AskLogout";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_T20_5fNetMsg_2eproto);
    return ::descriptor_table_T20_5fNetMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes user_name = 1;
  void clear_user_name();
  static const int kUserNameFieldNumber = 1;
  const std::string& user_name() const;
  void set_user_name(const std::string& value);
  void set_user_name(std::string&& value);
  void set_user_name(const char* value);
  void set_user_name(const void* value, size_t size);
  std::string* mutable_user_name();
  std::string* release_user_name();
  void set_allocated_user_name(std::string* user_name);

  // @@protoc_insertion_point(class_scope:NetMsg.Msg_AskLogout)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_T20_5fNetMsg_2eproto;
};
// -------------------------------------------------------------------

class Msg_RespLogout :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NetMsg.Msg_RespLogout) */ {
 public:
  Msg_RespLogout();
  virtual ~Msg_RespLogout();

  Msg_RespLogout(const Msg_RespLogout& from);
  Msg_RespLogout(Msg_RespLogout&& from) noexcept
    : Msg_RespLogout() {
    *this = ::std::move(from);
  }

  inline Msg_RespLogout& operator=(const Msg_RespLogout& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_RespLogout& operator=(Msg_RespLogout&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Msg_RespLogout& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Msg_RespLogout* internal_default_instance() {
    return reinterpret_cast<const Msg_RespLogout*>(
               &_Msg_RespLogout_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(Msg_RespLogout* other);
  friend void swap(Msg_RespLogout& a, Msg_RespLogout& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Msg_RespLogout* New() const final {
    return CreateMaybeMessage<Msg_RespLogout>(nullptr);
  }

  Msg_RespLogout* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Msg_RespLogout>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Msg_RespLogout& from);
  void MergeFrom(const Msg_RespLogout& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_RespLogout* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NetMsg.Msg_RespLogout";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_T20_5fNetMsg_2eproto);
    return ::descriptor_table_T20_5fNetMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:NetMsg.Msg_RespLogout)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_T20_5fNetMsg_2eproto;
};
// -------------------------------------------------------------------

class Msg_Message :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NetMsg.Msg_Message) */ {
 public:
  Msg_Message();
  virtual ~Msg_Message();

  Msg_Message(const Msg_Message& from);
  Msg_Message(Msg_Message&& from) noexcept
    : Msg_Message() {
    *this = ::std::move(from);
  }

  inline Msg_Message& operator=(const Msg_Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_Message& operator=(Msg_Message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Msg_Message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Msg_Message* internal_default_instance() {
    return reinterpret_cast<const Msg_Message*>(
               &_Msg_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(Msg_Message* other);
  friend void swap(Msg_Message& a, Msg_Message& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Msg_Message* New() const final {
    return CreateMaybeMessage<Msg_Message>(nullptr);
  }

  Msg_Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Msg_Message>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Msg_Message& from);
  void MergeFrom(const Msg_Message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_Message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NetMsg.Msg_Message";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_T20_5fNetMsg_2eproto);
    return ::descriptor_table_T20_5fNetMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes device_id = 1;
  int device_id_size() const;
  void clear_device_id();
  static const int kDeviceIdFieldNumber = 1;
  const std::string& device_id(int index) const;
  std::string* mutable_device_id(int index);
  void set_device_id(int index, const std::string& value);
  void set_device_id(int index, std::string&& value);
  void set_device_id(int index, const char* value);
  void set_device_id(int index, const void* value, size_t size);
  std::string* add_device_id();
  void add_device_id(const std::string& value);
  void add_device_id(std::string&& value);
  void add_device_id(const char* value);
  void add_device_id(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& device_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_device_id();

  // bytes message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const void* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);

  // @@protoc_insertion_point(class_scope:NetMsg.Msg_Message)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> device_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_T20_5fNetMsg_2eproto;
};
// -------------------------------------------------------------------

class Lession :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NetMsg.Lession) */ {
 public:
  Lession();
  virtual ~Lession();

  Lession(const Lession& from);
  Lession(Lession&& from) noexcept
    : Lession() {
    *this = ::std::move(from);
  }

  inline Lession& operator=(const Lession& from) {
    CopyFrom(from);
    return *this;
  }
  inline Lession& operator=(Lession&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Lession& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Lession* internal_default_instance() {
    return reinterpret_cast<const Lession*>(
               &_Lession_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(Lession* other);
  friend void swap(Lession& a, Lession& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Lession* New() const final {
    return CreateMaybeMessage<Lession>(nullptr);
  }

  Lession* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Lession>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Lession& from);
  void MergeFrom(const Lession& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Lession* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NetMsg.Lession";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_T20_5fNetMsg_2eproto);
    return ::descriptor_table_T20_5fNetMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:NetMsg.Lession)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_T20_5fNetMsg_2eproto;
};
// -------------------------------------------------------------------

class Msg_StartTask :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NetMsg.Msg_StartTask) */ {
 public:
  Msg_StartTask();
  virtual ~Msg_StartTask();

  Msg_StartTask(const Msg_StartTask& from);
  Msg_StartTask(Msg_StartTask&& from) noexcept
    : Msg_StartTask() {
    *this = ::std::move(from);
  }

  inline Msg_StartTask& operator=(const Msg_StartTask& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_StartTask& operator=(Msg_StartTask&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Msg_StartTask& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Msg_StartTask* internal_default_instance() {
    return reinterpret_cast<const Msg_StartTask*>(
               &_Msg_StartTask_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(Msg_StartTask* other);
  friend void swap(Msg_StartTask& a, Msg_StartTask& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Msg_StartTask* New() const final {
    return CreateMaybeMessage<Msg_StartTask>(nullptr);
  }

  Msg_StartTask* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Msg_StartTask>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Msg_StartTask& from);
  void MergeFrom(const Msg_StartTask& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_StartTask* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NetMsg.Msg_StartTask";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_T20_5fNetMsg_2eproto);
    return ::descriptor_table_T20_5fNetMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .NetMsg.Lession train = 4;
  int train_size() const;
  void clear_train();
  static const int kTrainFieldNumber = 4;
  ::NetMsg::Lession* mutable_train(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NetMsg::Lession >*
      mutable_train();
  const ::NetMsg::Lession& train(int index) const;
  ::NetMsg::Lession* add_train();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NetMsg::Lession >&
      train() const;

  // bytes id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const void* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);

  // bytes lession_type = 2;
  void clear_lession_type();
  static const int kLessionTypeFieldNumber = 2;
  const std::string& lession_type() const;
  void set_lession_type(const std::string& value);
  void set_lession_type(std::string&& value);
  void set_lession_type(const char* value);
  void set_lession_type(const void* value, size_t size);
  std::string* mutable_lession_type();
  std::string* release_lession_type();
  void set_allocated_lession_type(std::string* lession_type);

  // bytes task_id = 3;
  void clear_task_id();
  static const int kTaskIdFieldNumber = 3;
  const std::string& task_id() const;
  void set_task_id(const std::string& value);
  void set_task_id(std::string&& value);
  void set_task_id(const char* value);
  void set_task_id(const void* value, size_t size);
  std::string* mutable_task_id();
  std::string* release_task_id();
  void set_allocated_task_id(std::string* task_id);

  // bytes student_id = 5;
  void clear_student_id();
  static const int kStudentIdFieldNumber = 5;
  const std::string& student_id() const;
  void set_student_id(const std::string& value);
  void set_student_id(std::string&& value);
  void set_student_id(const char* value);
  void set_student_id(const void* value, size_t size);
  std::string* mutable_student_id();
  std::string* release_student_id();
  void set_allocated_student_id(std::string* student_id);

  // bytes student_name = 6;
  void clear_student_name();
  static const int kStudentNameFieldNumber = 6;
  const std::string& student_name() const;
  void set_student_name(const std::string& value);
  void set_student_name(std::string&& value);
  void set_student_name(const char* value);
  void set_student_name(const void* value, size_t size);
  std::string* mutable_student_name();
  std::string* release_student_name();
  void set_allocated_student_name(std::string* student_name);

  // @@protoc_insertion_point(class_scope:NetMsg.Msg_StartTask)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NetMsg::Lession > train_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lession_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr student_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr student_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_T20_5fNetMsg_2eproto;
};
// -------------------------------------------------------------------

class Msg_StopTask :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NetMsg.Msg_StopTask) */ {
 public:
  Msg_StopTask();
  virtual ~Msg_StopTask();

  Msg_StopTask(const Msg_StopTask& from);
  Msg_StopTask(Msg_StopTask&& from) noexcept
    : Msg_StopTask() {
    *this = ::std::move(from);
  }

  inline Msg_StopTask& operator=(const Msg_StopTask& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_StopTask& operator=(Msg_StopTask&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Msg_StopTask& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Msg_StopTask* internal_default_instance() {
    return reinterpret_cast<const Msg_StopTask*>(
               &_Msg_StopTask_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(Msg_StopTask* other);
  friend void swap(Msg_StopTask& a, Msg_StopTask& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Msg_StopTask* New() const final {
    return CreateMaybeMessage<Msg_StopTask>(nullptr);
  }

  Msg_StopTask* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Msg_StopTask>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Msg_StopTask& from);
  void MergeFrom(const Msg_StopTask& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_StopTask* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NetMsg.Msg_StopTask";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_T20_5fNetMsg_2eproto);
    return ::descriptor_table_T20_5fNetMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes reason_text = 2;
  void clear_reason_text();
  static const int kReasonTextFieldNumber = 2;
  const std::string& reason_text() const;
  void set_reason_text(const std::string& value);
  void set_reason_text(std::string&& value);
  void set_reason_text(const char* value);
  void set_reason_text(const void* value, size_t size);
  std::string* mutable_reason_text();
  std::string* release_reason_text();
  void set_allocated_reason_text(std::string* reason_text);

  // int32 reason = 1;
  void clear_reason();
  static const int kReasonFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 reason() const;
  void set_reason(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:NetMsg.Msg_StopTask)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_text_;
  ::PROTOBUF_NAMESPACE_ID::int32 reason_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_T20_5fNetMsg_2eproto;
};
// -------------------------------------------------------------------

class Msg_TaskStepInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NetMsg.Msg_TaskStepInfo) */ {
 public:
  Msg_TaskStepInfo();
  virtual ~Msg_TaskStepInfo();

  Msg_TaskStepInfo(const Msg_TaskStepInfo& from);
  Msg_TaskStepInfo(Msg_TaskStepInfo&& from) noexcept
    : Msg_TaskStepInfo() {
    *this = ::std::move(from);
  }

  inline Msg_TaskStepInfo& operator=(const Msg_TaskStepInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_TaskStepInfo& operator=(Msg_TaskStepInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Msg_TaskStepInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Msg_TaskStepInfo* internal_default_instance() {
    return reinterpret_cast<const Msg_TaskStepInfo*>(
               &_Msg_TaskStepInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(Msg_TaskStepInfo* other);
  friend void swap(Msg_TaskStepInfo& a, Msg_TaskStepInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Msg_TaskStepInfo* New() const final {
    return CreateMaybeMessage<Msg_TaskStepInfo>(nullptr);
  }

  Msg_TaskStepInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Msg_TaskStepInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Msg_TaskStepInfo& from);
  void MergeFrom(const Msg_TaskStepInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_TaskStepInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NetMsg.Msg_TaskStepInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_T20_5fNetMsg_2eproto);
    return ::descriptor_table_T20_5fNetMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes msg = 2;
  void clear_msg();
  static const int kMsgFieldNumber = 2;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const void* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // int32 step_id = 1;
  void clear_step_id();
  static const int kStepIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 step_id() const;
  void set_step_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:NetMsg.Msg_TaskStepInfo)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 step_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_T20_5fNetMsg_2eproto;
};
// -------------------------------------------------------------------

class Msg_TaskOver :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NetMsg.Msg_TaskOver) */ {
 public:
  Msg_TaskOver();
  virtual ~Msg_TaskOver();

  Msg_TaskOver(const Msg_TaskOver& from);
  Msg_TaskOver(Msg_TaskOver&& from) noexcept
    : Msg_TaskOver() {
    *this = ::std::move(from);
  }

  inline Msg_TaskOver& operator=(const Msg_TaskOver& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_TaskOver& operator=(Msg_TaskOver&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Msg_TaskOver& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Msg_TaskOver* internal_default_instance() {
    return reinterpret_cast<const Msg_TaskOver*>(
               &_Msg_TaskOver_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(Msg_TaskOver* other);
  friend void swap(Msg_TaskOver& a, Msg_TaskOver& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Msg_TaskOver* New() const final {
    return CreateMaybeMessage<Msg_TaskOver>(nullptr);
  }

  Msg_TaskOver* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Msg_TaskOver>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Msg_TaskOver& from);
  void MergeFrom(const Msg_TaskOver& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_TaskOver* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NetMsg.Msg_TaskOver";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_T20_5fNetMsg_2eproto);
    return ::descriptor_table_T20_5fNetMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 reason = 1;
  void clear_reason();
  static const int kReasonFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 reason() const;
  void set_reason(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 score = 2;
  void clear_score();
  static const int kScoreFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 score() const;
  void set_score(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:NetMsg.Msg_TaskOver)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 reason_;
  ::PROTOBUF_NAMESPACE_ID::int32 score_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_T20_5fNetMsg_2eproto;
};
// -------------------------------------------------------------------

class Msg_E :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NetMsg.Msg_E) */ {
 public:
  Msg_E();
  virtual ~Msg_E();

  Msg_E(const Msg_E& from);
  Msg_E(Msg_E&& from) noexcept
    : Msg_E() {
    *this = ::std::move(from);
  }

  inline Msg_E& operator=(const Msg_E& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_E& operator=(Msg_E&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Msg_E& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Msg_E* internal_default_instance() {
    return reinterpret_cast<const Msg_E*>(
               &_Msg_E_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(Msg_E* other);
  friend void swap(Msg_E& a, Msg_E& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Msg_E* New() const final {
    return CreateMaybeMessage<Msg_E>(nullptr);
  }

  Msg_E* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Msg_E>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Msg_E& from);
  void MergeFrom(const Msg_E& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_E* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NetMsg.Msg_E";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_T20_5fNetMsg_2eproto);
    return ::descriptor_table_T20_5fNetMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes shellNum = 7;
  void clear_shellnum();
  static const int kShellNumFieldNumber = 7;
  const std::string& shellnum() const;
  void set_shellnum(const std::string& value);
  void set_shellnum(std::string&& value);
  void set_shellnum(const char* value);
  void set_shellnum(const void* value, size_t size);
  std::string* mutable_shellnum();
  std::string* release_shellnum();
  void set_allocated_shellnum(std::string* shellnum);

  // int32 year = 1;
  void clear_year();
  static const int kYearFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 year() const;
  void set_year(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 month = 2;
  void clear_month();
  static const int kMonthFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 month() const;
  void set_month(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 day = 3;
  void clear_day();
  static const int kDayFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 day() const;
  void set_day(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 hour = 4;
  void clear_hour();
  static const int kHourFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 hour() const;
  void set_hour(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 min = 5;
  void clear_min();
  static const int kMinFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::int32 min() const;
  void set_min(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 sec = 6;
  void clear_sec();
  static const int kSecFieldNumber = 6;
  ::PROTOBUF_NAMESPACE_ID::int32 sec() const;
  void set_sec(::PROTOBUF_NAMESPACE_ID::int32 value);

  // bool isSelfChkOrTestTxtSaved = 8;
  void clear_isselfchkortesttxtsaved();
  static const int kIsSelfChkOrTestTxtSavedFieldNumber = 8;
  bool isselfchkortesttxtsaved() const;
  void set_isselfchkortesttxtsaved(bool value);

  // @@protoc_insertion_point(class_scope:NetMsg.Msg_E)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr shellnum_;
  ::PROTOBUF_NAMESPACE_ID::int32 year_;
  ::PROTOBUF_NAMESPACE_ID::int32 month_;
  ::PROTOBUF_NAMESPACE_ID::int32 day_;
  ::PROTOBUF_NAMESPACE_ID::int32 hour_;
  ::PROTOBUF_NAMESPACE_ID::int32 min_;
  ::PROTOBUF_NAMESPACE_ID::int32 sec_;
  bool isselfchkortesttxtsaved_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_T20_5fNetMsg_2eproto;
};
// -------------------------------------------------------------------

class Msg_F :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NetMsg.Msg_F) */ {
 public:
  Msg_F();
  virtual ~Msg_F();

  Msg_F(const Msg_F& from);
  Msg_F(Msg_F&& from) noexcept
    : Msg_F() {
    *this = ::std::move(from);
  }

  inline Msg_F& operator=(const Msg_F& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_F& operator=(Msg_F&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Msg_F& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Msg_F* internal_default_instance() {
    return reinterpret_cast<const Msg_F*>(
               &_Msg_F_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(Msg_F* other);
  friend void swap(Msg_F& a, Msg_F& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Msg_F* New() const final {
    return CreateMaybeMessage<Msg_F>(nullptr);
  }

  Msg_F* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Msg_F>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Msg_F& from);
  void MergeFrom(const Msg_F& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_F* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NetMsg.Msg_F";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_T20_5fNetMsg_2eproto);
    return ::descriptor_table_T20_5fNetMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes FuzeTypeSelected = 1;
  void clear_fuzetypeselected();
  static const int kFuzeTypeSelectedFieldNumber = 1;
  const std::string& fuzetypeselected() const;
  void set_fuzetypeselected(const std::string& value);
  void set_fuzetypeselected(std::string&& value);
  void set_fuzetypeselected(const char* value);
  void set_fuzetypeselected(const void* value, size_t size);
  std::string* mutable_fuzetypeselected();
  std::string* release_fuzetypeselected();
  void set_allocated_fuzetypeselected(std::string* fuzetypeselected);

  // bytes SerialNum = 2;
  void clear_serialnum();
  static const int kSerialNumFieldNumber = 2;
  const std::string& serialnum() const;
  void set_serialnum(const std::string& value);
  void set_serialnum(std::string&& value);
  void set_serialnum(const char* value);
  void set_serialnum(const void* value, size_t size);
  std::string* mutable_serialnum();
  std::string* release_serialnum();
  void set_allocated_serialnum(std::string* serialnum);

  // @@protoc_insertion_point(class_scope:NetMsg.Msg_F)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fuzetypeselected_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serialnum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_T20_5fNetMsg_2eproto;
};
// -------------------------------------------------------------------

class Msg_K :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NetMsg.Msg_K) */ {
 public:
  Msg_K();
  virtual ~Msg_K();

  Msg_K(const Msg_K& from);
  Msg_K(Msg_K&& from) noexcept
    : Msg_K() {
    *this = ::std::move(from);
  }

  inline Msg_K& operator=(const Msg_K& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_K& operator=(Msg_K&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Msg_K& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Msg_K* internal_default_instance() {
    return reinterpret_cast<const Msg_K*>(
               &_Msg_K_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(Msg_K* other);
  friend void swap(Msg_K& a, Msg_K& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Msg_K* New() const final {
    return CreateMaybeMessage<Msg_K>(nullptr);
  }

  Msg_K* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Msg_K>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Msg_K& from);
  void MergeFrom(const Msg_K& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_K* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NetMsg.Msg_K";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_T20_5fNetMsg_2eproto);
    return ::descriptor_table_T20_5fNetMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes order = 1;
  void clear_order();
  static const int kOrderFieldNumber = 1;
  const std::string& order() const;
  void set_order(const std::string& value);
  void set_order(std::string&& value);
  void set_order(const char* value);
  void set_order(const void* value, size_t size);
  std::string* mutable_order();
  std::string* release_order();
  void set_allocated_order(std::string* order);

  // @@protoc_insertion_point(class_scope:NetMsg.Msg_K)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_T20_5fNetMsg_2eproto;
};
// -------------------------------------------------------------------

class Msg_BD :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NetMsg.Msg_BD) */ {
 public:
  Msg_BD();
  virtual ~Msg_BD();

  Msg_BD(const Msg_BD& from);
  Msg_BD(Msg_BD&& from) noexcept
    : Msg_BD() {
    *this = ::std::move(from);
  }

  inline Msg_BD& operator=(const Msg_BD& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_BD& operator=(Msg_BD&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Msg_BD& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Msg_BD* internal_default_instance() {
    return reinterpret_cast<const Msg_BD*>(
               &_Msg_BD_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(Msg_BD* other);
  friend void swap(Msg_BD& a, Msg_BD& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Msg_BD* New() const final {
    return CreateMaybeMessage<Msg_BD>(nullptr);
  }

  Msg_BD* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Msg_BD>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Msg_BD& from);
  void MergeFrom(const Msg_BD& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_BD* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NetMsg.Msg_BD";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_T20_5fNetMsg_2eproto);
    return ::descriptor_table_T20_5fNetMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:NetMsg.Msg_BD)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_T20_5fNetMsg_2eproto;
};
// -------------------------------------------------------------------

class Msg_T_Online_Device :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NetMsg.Msg_T_Online_Device) */ {
 public:
  Msg_T_Online_Device();
  virtual ~Msg_T_Online_Device();

  Msg_T_Online_Device(const Msg_T_Online_Device& from);
  Msg_T_Online_Device(Msg_T_Online_Device&& from) noexcept
    : Msg_T_Online_Device() {
    *this = ::std::move(from);
  }

  inline Msg_T_Online_Device& operator=(const Msg_T_Online_Device& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_T_Online_Device& operator=(Msg_T_Online_Device&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Msg_T_Online_Device& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Msg_T_Online_Device* internal_default_instance() {
    return reinterpret_cast<const Msg_T_Online_Device*>(
               &_Msg_T_Online_Device_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(Msg_T_Online_Device* other);
  friend void swap(Msg_T_Online_Device& a, Msg_T_Online_Device& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Msg_T_Online_Device* New() const final {
    return CreateMaybeMessage<Msg_T_Online_Device>(nullptr);
  }

  Msg_T_Online_Device* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Msg_T_Online_Device>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Msg_T_Online_Device& from);
  void MergeFrom(const Msg_T_Online_Device& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_T_Online_Device* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NetMsg.Msg_T_Online_Device";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_T20_5fNetMsg_2eproto);
    return ::descriptor_table_T20_5fNetMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 onlineflag = 1;
  void clear_onlineflag();
  static const int kOnlineflagFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 onlineflag() const;
  void set_onlineflag(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:NetMsg.Msg_T_Online_Device)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 onlineflag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_T20_5fNetMsg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Msg_AskRegDC

// bytes id = 1;
inline void Msg_AskRegDC::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Msg_AskRegDC::id() const {
  // @@protoc_insertion_point(field_get:NetMsg.Msg_AskRegDC.id)
  return id_.GetNoArena();
}
inline void Msg_AskRegDC::set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetMsg.Msg_AskRegDC.id)
}
inline void Msg_AskRegDC::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetMsg.Msg_AskRegDC.id)
}
inline void Msg_AskRegDC::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetMsg.Msg_AskRegDC.id)
}
inline void Msg_AskRegDC::set_id(const void* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetMsg.Msg_AskRegDC.id)
}
inline std::string* Msg_AskRegDC::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:NetMsg.Msg_AskRegDC.id)
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Msg_AskRegDC::release_id() {
  // @@protoc_insertion_point(field_release:NetMsg.Msg_AskRegDC.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Msg_AskRegDC::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:NetMsg.Msg_AskRegDC.id)
}

// uint32 version = 2;
inline void Msg_AskRegDC::clear_version() {
  version_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Msg_AskRegDC::version() const {
  // @@protoc_insertion_point(field_get:NetMsg.Msg_AskRegDC.version)
  return version_;
}
inline void Msg_AskRegDC::set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.Msg_AskRegDC.version)
}

// .NetMsg.DCType dc_type = 3;
inline void Msg_AskRegDC::clear_dc_type() {
  dc_type_ = 0;
}
inline ::NetMsg::DCType Msg_AskRegDC::dc_type() const {
  // @@protoc_insertion_point(field_get:NetMsg.Msg_AskRegDC.dc_type)
  return static_cast< ::NetMsg::DCType >(dc_type_);
}
inline void Msg_AskRegDC::set_dc_type(::NetMsg::DCType value) {
  
  dc_type_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.Msg_AskRegDC.dc_type)
}

// -------------------------------------------------------------------

// Msg_RespRegDC

// int32 result = 1;
inline void Msg_RespRegDC::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Msg_RespRegDC::result() const {
  // @@protoc_insertion_point(field_get:NetMsg.Msg_RespRegDC.result)
  return result_;
}
inline void Msg_RespRegDC::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.Msg_RespRegDC.result)
}

// bytes timestamp = 2;
inline void Msg_RespRegDC::clear_timestamp() {
  timestamp_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Msg_RespRegDC::timestamp() const {
  // @@protoc_insertion_point(field_get:NetMsg.Msg_RespRegDC.timestamp)
  return timestamp_.GetNoArena();
}
inline void Msg_RespRegDC::set_timestamp(const std::string& value) {
  
  timestamp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetMsg.Msg_RespRegDC.timestamp)
}
inline void Msg_RespRegDC::set_timestamp(std::string&& value) {
  
  timestamp_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetMsg.Msg_RespRegDC.timestamp)
}
inline void Msg_RespRegDC::set_timestamp(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  timestamp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetMsg.Msg_RespRegDC.timestamp)
}
inline void Msg_RespRegDC::set_timestamp(const void* value, size_t size) {
  
  timestamp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetMsg.Msg_RespRegDC.timestamp)
}
inline std::string* Msg_RespRegDC::mutable_timestamp() {
  
  // @@protoc_insertion_point(field_mutable:NetMsg.Msg_RespRegDC.timestamp)
  return timestamp_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Msg_RespRegDC::release_timestamp() {
  // @@protoc_insertion_point(field_release:NetMsg.Msg_RespRegDC.timestamp)
  
  return timestamp_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Msg_RespRegDC::set_allocated_timestamp(std::string* timestamp) {
  if (timestamp != nullptr) {
    
  } else {
    
  }
  timestamp_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), timestamp);
  // @@protoc_insertion_point(field_set_allocated:NetMsg.Msg_RespRegDC.timestamp)
}

// -------------------------------------------------------------------

// Msg_AskLogin

// bytes user_name = 1;
inline void Msg_AskLogin::clear_user_name() {
  user_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Msg_AskLogin::user_name() const {
  // @@protoc_insertion_point(field_get:NetMsg.Msg_AskLogin.user_name)
  return user_name_.GetNoArena();
}
inline void Msg_AskLogin::set_user_name(const std::string& value) {
  
  user_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetMsg.Msg_AskLogin.user_name)
}
inline void Msg_AskLogin::set_user_name(std::string&& value) {
  
  user_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetMsg.Msg_AskLogin.user_name)
}
inline void Msg_AskLogin::set_user_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetMsg.Msg_AskLogin.user_name)
}
inline void Msg_AskLogin::set_user_name(const void* value, size_t size) {
  
  user_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetMsg.Msg_AskLogin.user_name)
}
inline std::string* Msg_AskLogin::mutable_user_name() {
  
  // @@protoc_insertion_point(field_mutable:NetMsg.Msg_AskLogin.user_name)
  return user_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Msg_AskLogin::release_user_name() {
  // @@protoc_insertion_point(field_release:NetMsg.Msg_AskLogin.user_name)
  
  return user_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Msg_AskLogin::set_allocated_user_name(std::string* user_name) {
  if (user_name != nullptr) {
    
  } else {
    
  }
  user_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_name);
  // @@protoc_insertion_point(field_set_allocated:NetMsg.Msg_AskLogin.user_name)
}

// bytes password = 2;
inline void Msg_AskLogin::clear_password() {
  password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Msg_AskLogin::password() const {
  // @@protoc_insertion_point(field_get:NetMsg.Msg_AskLogin.password)
  return password_.GetNoArena();
}
inline void Msg_AskLogin::set_password(const std::string& value) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetMsg.Msg_AskLogin.password)
}
inline void Msg_AskLogin::set_password(std::string&& value) {
  
  password_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetMsg.Msg_AskLogin.password)
}
inline void Msg_AskLogin::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetMsg.Msg_AskLogin.password)
}
inline void Msg_AskLogin::set_password(const void* value, size_t size) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetMsg.Msg_AskLogin.password)
}
inline std::string* Msg_AskLogin::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:NetMsg.Msg_AskLogin.password)
  return password_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Msg_AskLogin::release_password() {
  // @@protoc_insertion_point(field_release:NetMsg.Msg_AskLogin.password)
  
  return password_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Msg_AskLogin::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:NetMsg.Msg_AskLogin.password)
}

// -------------------------------------------------------------------

// Msg_RespLogin

// int32 result = 1;
inline void Msg_RespLogin::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Msg_RespLogin::result() const {
  // @@protoc_insertion_point(field_get:NetMsg.Msg_RespLogin.result)
  return result_;
}
inline void Msg_RespLogin::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.Msg_RespLogin.result)
}

// bytes timestamp = 2;
inline void Msg_RespLogin::clear_timestamp() {
  timestamp_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Msg_RespLogin::timestamp() const {
  // @@protoc_insertion_point(field_get:NetMsg.Msg_RespLogin.timestamp)
  return timestamp_.GetNoArena();
}
inline void Msg_RespLogin::set_timestamp(const std::string& value) {
  
  timestamp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetMsg.Msg_RespLogin.timestamp)
}
inline void Msg_RespLogin::set_timestamp(std::string&& value) {
  
  timestamp_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetMsg.Msg_RespLogin.timestamp)
}
inline void Msg_RespLogin::set_timestamp(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  timestamp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetMsg.Msg_RespLogin.timestamp)
}
inline void Msg_RespLogin::set_timestamp(const void* value, size_t size) {
  
  timestamp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetMsg.Msg_RespLogin.timestamp)
}
inline std::string* Msg_RespLogin::mutable_timestamp() {
  
  // @@protoc_insertion_point(field_mutable:NetMsg.Msg_RespLogin.timestamp)
  return timestamp_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Msg_RespLogin::release_timestamp() {
  // @@protoc_insertion_point(field_release:NetMsg.Msg_RespLogin.timestamp)
  
  return timestamp_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Msg_RespLogin::set_allocated_timestamp(std::string* timestamp) {
  if (timestamp != nullptr) {
    
  } else {
    
  }
  timestamp_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), timestamp);
  // @@protoc_insertion_point(field_set_allocated:NetMsg.Msg_RespLogin.timestamp)
}

// -------------------------------------------------------------------

// Msg_AskLogout

// bytes user_name = 1;
inline void Msg_AskLogout::clear_user_name() {
  user_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Msg_AskLogout::user_name() const {
  // @@protoc_insertion_point(field_get:NetMsg.Msg_AskLogout.user_name)
  return user_name_.GetNoArena();
}
inline void Msg_AskLogout::set_user_name(const std::string& value) {
  
  user_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetMsg.Msg_AskLogout.user_name)
}
inline void Msg_AskLogout::set_user_name(std::string&& value) {
  
  user_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetMsg.Msg_AskLogout.user_name)
}
inline void Msg_AskLogout::set_user_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetMsg.Msg_AskLogout.user_name)
}
inline void Msg_AskLogout::set_user_name(const void* value, size_t size) {
  
  user_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetMsg.Msg_AskLogout.user_name)
}
inline std::string* Msg_AskLogout::mutable_user_name() {
  
  // @@protoc_insertion_point(field_mutable:NetMsg.Msg_AskLogout.user_name)
  return user_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Msg_AskLogout::release_user_name() {
  // @@protoc_insertion_point(field_release:NetMsg.Msg_AskLogout.user_name)
  
  return user_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Msg_AskLogout::set_allocated_user_name(std::string* user_name) {
  if (user_name != nullptr) {
    
  } else {
    
  }
  user_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_name);
  // @@protoc_insertion_point(field_set_allocated:NetMsg.Msg_AskLogout.user_name)
}

// -------------------------------------------------------------------

// Msg_RespLogout

// int32 result = 1;
inline void Msg_RespLogout::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Msg_RespLogout::result() const {
  // @@protoc_insertion_point(field_get:NetMsg.Msg_RespLogout.result)
  return result_;
}
inline void Msg_RespLogout::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.Msg_RespLogout.result)
}

// -------------------------------------------------------------------

// Msg_Message

// repeated bytes device_id = 1;
inline int Msg_Message::device_id_size() const {
  return device_id_.size();
}
inline void Msg_Message::clear_device_id() {
  device_id_.Clear();
}
inline const std::string& Msg_Message::device_id(int index) const {
  // @@protoc_insertion_point(field_get:NetMsg.Msg_Message.device_id)
  return device_id_.Get(index);
}
inline std::string* Msg_Message::mutable_device_id(int index) {
  // @@protoc_insertion_point(field_mutable:NetMsg.Msg_Message.device_id)
  return device_id_.Mutable(index);
}
inline void Msg_Message::set_device_id(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:NetMsg.Msg_Message.device_id)
  device_id_.Mutable(index)->assign(value);
}
inline void Msg_Message::set_device_id(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:NetMsg.Msg_Message.device_id)
  device_id_.Mutable(index)->assign(std::move(value));
}
inline void Msg_Message::set_device_id(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  device_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:NetMsg.Msg_Message.device_id)
}
inline void Msg_Message::set_device_id(int index, const void* value, size_t size) {
  device_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NetMsg.Msg_Message.device_id)
}
inline std::string* Msg_Message::add_device_id() {
  // @@protoc_insertion_point(field_add_mutable:NetMsg.Msg_Message.device_id)
  return device_id_.Add();
}
inline void Msg_Message::add_device_id(const std::string& value) {
  device_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:NetMsg.Msg_Message.device_id)
}
inline void Msg_Message::add_device_id(std::string&& value) {
  device_id_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:NetMsg.Msg_Message.device_id)
}
inline void Msg_Message::add_device_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  device_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:NetMsg.Msg_Message.device_id)
}
inline void Msg_Message::add_device_id(const void* value, size_t size) {
  device_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:NetMsg.Msg_Message.device_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Msg_Message::device_id() const {
  // @@protoc_insertion_point(field_list:NetMsg.Msg_Message.device_id)
  return device_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Msg_Message::mutable_device_id() {
  // @@protoc_insertion_point(field_mutable_list:NetMsg.Msg_Message.device_id)
  return &device_id_;
}

// bytes message = 2;
inline void Msg_Message::clear_message() {
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Msg_Message::message() const {
  // @@protoc_insertion_point(field_get:NetMsg.Msg_Message.message)
  return message_.GetNoArena();
}
inline void Msg_Message::set_message(const std::string& value) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetMsg.Msg_Message.message)
}
inline void Msg_Message::set_message(std::string&& value) {
  
  message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetMsg.Msg_Message.message)
}
inline void Msg_Message::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetMsg.Msg_Message.message)
}
inline void Msg_Message::set_message(const void* value, size_t size) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetMsg.Msg_Message.message)
}
inline std::string* Msg_Message::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:NetMsg.Msg_Message.message)
  return message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Msg_Message::release_message() {
  // @@protoc_insertion_point(field_release:NetMsg.Msg_Message.message)
  
  return message_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Msg_Message::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:NetMsg.Msg_Message.message)
}

// -------------------------------------------------------------------

// Lession

// -------------------------------------------------------------------

// Msg_StartTask

// bytes id = 1;
inline void Msg_StartTask::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Msg_StartTask::id() const {
  // @@protoc_insertion_point(field_get:NetMsg.Msg_StartTask.id)
  return id_.GetNoArena();
}
inline void Msg_StartTask::set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetMsg.Msg_StartTask.id)
}
inline void Msg_StartTask::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetMsg.Msg_StartTask.id)
}
inline void Msg_StartTask::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetMsg.Msg_StartTask.id)
}
inline void Msg_StartTask::set_id(const void* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetMsg.Msg_StartTask.id)
}
inline std::string* Msg_StartTask::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:NetMsg.Msg_StartTask.id)
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Msg_StartTask::release_id() {
  // @@protoc_insertion_point(field_release:NetMsg.Msg_StartTask.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Msg_StartTask::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:NetMsg.Msg_StartTask.id)
}

// bytes lession_type = 2;
inline void Msg_StartTask::clear_lession_type() {
  lession_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Msg_StartTask::lession_type() const {
  // @@protoc_insertion_point(field_get:NetMsg.Msg_StartTask.lession_type)
  return lession_type_.GetNoArena();
}
inline void Msg_StartTask::set_lession_type(const std::string& value) {
  
  lession_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetMsg.Msg_StartTask.lession_type)
}
inline void Msg_StartTask::set_lession_type(std::string&& value) {
  
  lession_type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetMsg.Msg_StartTask.lession_type)
}
inline void Msg_StartTask::set_lession_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  lession_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetMsg.Msg_StartTask.lession_type)
}
inline void Msg_StartTask::set_lession_type(const void* value, size_t size) {
  
  lession_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetMsg.Msg_StartTask.lession_type)
}
inline std::string* Msg_StartTask::mutable_lession_type() {
  
  // @@protoc_insertion_point(field_mutable:NetMsg.Msg_StartTask.lession_type)
  return lession_type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Msg_StartTask::release_lession_type() {
  // @@protoc_insertion_point(field_release:NetMsg.Msg_StartTask.lession_type)
  
  return lession_type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Msg_StartTask::set_allocated_lession_type(std::string* lession_type) {
  if (lession_type != nullptr) {
    
  } else {
    
  }
  lession_type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lession_type);
  // @@protoc_insertion_point(field_set_allocated:NetMsg.Msg_StartTask.lession_type)
}

// bytes task_id = 3;
inline void Msg_StartTask::clear_task_id() {
  task_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Msg_StartTask::task_id() const {
  // @@protoc_insertion_point(field_get:NetMsg.Msg_StartTask.task_id)
  return task_id_.GetNoArena();
}
inline void Msg_StartTask::set_task_id(const std::string& value) {
  
  task_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetMsg.Msg_StartTask.task_id)
}
inline void Msg_StartTask::set_task_id(std::string&& value) {
  
  task_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetMsg.Msg_StartTask.task_id)
}
inline void Msg_StartTask::set_task_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  task_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetMsg.Msg_StartTask.task_id)
}
inline void Msg_StartTask::set_task_id(const void* value, size_t size) {
  
  task_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetMsg.Msg_StartTask.task_id)
}
inline std::string* Msg_StartTask::mutable_task_id() {
  
  // @@protoc_insertion_point(field_mutable:NetMsg.Msg_StartTask.task_id)
  return task_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Msg_StartTask::release_task_id() {
  // @@protoc_insertion_point(field_release:NetMsg.Msg_StartTask.task_id)
  
  return task_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Msg_StartTask::set_allocated_task_id(std::string* task_id) {
  if (task_id != nullptr) {
    
  } else {
    
  }
  task_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), task_id);
  // @@protoc_insertion_point(field_set_allocated:NetMsg.Msg_StartTask.task_id)
}

// repeated .NetMsg.Lession train = 4;
inline int Msg_StartTask::train_size() const {
  return train_.size();
}
inline void Msg_StartTask::clear_train() {
  train_.Clear();
}
inline ::NetMsg::Lession* Msg_StartTask::mutable_train(int index) {
  // @@protoc_insertion_point(field_mutable:NetMsg.Msg_StartTask.train)
  return train_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NetMsg::Lession >*
Msg_StartTask::mutable_train() {
  // @@protoc_insertion_point(field_mutable_list:NetMsg.Msg_StartTask.train)
  return &train_;
}
inline const ::NetMsg::Lession& Msg_StartTask::train(int index) const {
  // @@protoc_insertion_point(field_get:NetMsg.Msg_StartTask.train)
  return train_.Get(index);
}
inline ::NetMsg::Lession* Msg_StartTask::add_train() {
  // @@protoc_insertion_point(field_add:NetMsg.Msg_StartTask.train)
  return train_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NetMsg::Lession >&
Msg_StartTask::train() const {
  // @@protoc_insertion_point(field_list:NetMsg.Msg_StartTask.train)
  return train_;
}

// bytes student_id = 5;
inline void Msg_StartTask::clear_student_id() {
  student_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Msg_StartTask::student_id() const {
  // @@protoc_insertion_point(field_get:NetMsg.Msg_StartTask.student_id)
  return student_id_.GetNoArena();
}
inline void Msg_StartTask::set_student_id(const std::string& value) {
  
  student_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetMsg.Msg_StartTask.student_id)
}
inline void Msg_StartTask::set_student_id(std::string&& value) {
  
  student_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetMsg.Msg_StartTask.student_id)
}
inline void Msg_StartTask::set_student_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  student_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetMsg.Msg_StartTask.student_id)
}
inline void Msg_StartTask::set_student_id(const void* value, size_t size) {
  
  student_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetMsg.Msg_StartTask.student_id)
}
inline std::string* Msg_StartTask::mutable_student_id() {
  
  // @@protoc_insertion_point(field_mutable:NetMsg.Msg_StartTask.student_id)
  return student_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Msg_StartTask::release_student_id() {
  // @@protoc_insertion_point(field_release:NetMsg.Msg_StartTask.student_id)
  
  return student_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Msg_StartTask::set_allocated_student_id(std::string* student_id) {
  if (student_id != nullptr) {
    
  } else {
    
  }
  student_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), student_id);
  // @@protoc_insertion_point(field_set_allocated:NetMsg.Msg_StartTask.student_id)
}

// bytes student_name = 6;
inline void Msg_StartTask::clear_student_name() {
  student_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Msg_StartTask::student_name() const {
  // @@protoc_insertion_point(field_get:NetMsg.Msg_StartTask.student_name)
  return student_name_.GetNoArena();
}
inline void Msg_StartTask::set_student_name(const std::string& value) {
  
  student_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetMsg.Msg_StartTask.student_name)
}
inline void Msg_StartTask::set_student_name(std::string&& value) {
  
  student_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetMsg.Msg_StartTask.student_name)
}
inline void Msg_StartTask::set_student_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  student_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetMsg.Msg_StartTask.student_name)
}
inline void Msg_StartTask::set_student_name(const void* value, size_t size) {
  
  student_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetMsg.Msg_StartTask.student_name)
}
inline std::string* Msg_StartTask::mutable_student_name() {
  
  // @@protoc_insertion_point(field_mutable:NetMsg.Msg_StartTask.student_name)
  return student_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Msg_StartTask::release_student_name() {
  // @@protoc_insertion_point(field_release:NetMsg.Msg_StartTask.student_name)
  
  return student_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Msg_StartTask::set_allocated_student_name(std::string* student_name) {
  if (student_name != nullptr) {
    
  } else {
    
  }
  student_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), student_name);
  // @@protoc_insertion_point(field_set_allocated:NetMsg.Msg_StartTask.student_name)
}

// -------------------------------------------------------------------

// Msg_StopTask

// int32 reason = 1;
inline void Msg_StopTask::clear_reason() {
  reason_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Msg_StopTask::reason() const {
  // @@protoc_insertion_point(field_get:NetMsg.Msg_StopTask.reason)
  return reason_;
}
inline void Msg_StopTask::set_reason(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  reason_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.Msg_StopTask.reason)
}

// bytes reason_text = 2;
inline void Msg_StopTask::clear_reason_text() {
  reason_text_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Msg_StopTask::reason_text() const {
  // @@protoc_insertion_point(field_get:NetMsg.Msg_StopTask.reason_text)
  return reason_text_.GetNoArena();
}
inline void Msg_StopTask::set_reason_text(const std::string& value) {
  
  reason_text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetMsg.Msg_StopTask.reason_text)
}
inline void Msg_StopTask::set_reason_text(std::string&& value) {
  
  reason_text_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetMsg.Msg_StopTask.reason_text)
}
inline void Msg_StopTask::set_reason_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reason_text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetMsg.Msg_StopTask.reason_text)
}
inline void Msg_StopTask::set_reason_text(const void* value, size_t size) {
  
  reason_text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetMsg.Msg_StopTask.reason_text)
}
inline std::string* Msg_StopTask::mutable_reason_text() {
  
  // @@protoc_insertion_point(field_mutable:NetMsg.Msg_StopTask.reason_text)
  return reason_text_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Msg_StopTask::release_reason_text() {
  // @@protoc_insertion_point(field_release:NetMsg.Msg_StopTask.reason_text)
  
  return reason_text_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Msg_StopTask::set_allocated_reason_text(std::string* reason_text) {
  if (reason_text != nullptr) {
    
  } else {
    
  }
  reason_text_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reason_text);
  // @@protoc_insertion_point(field_set_allocated:NetMsg.Msg_StopTask.reason_text)
}

// -------------------------------------------------------------------

// Msg_TaskStepInfo

// int32 step_id = 1;
inline void Msg_TaskStepInfo::clear_step_id() {
  step_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Msg_TaskStepInfo::step_id() const {
  // @@protoc_insertion_point(field_get:NetMsg.Msg_TaskStepInfo.step_id)
  return step_id_;
}
inline void Msg_TaskStepInfo::set_step_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  step_id_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.Msg_TaskStepInfo.step_id)
}

// bytes msg = 2;
inline void Msg_TaskStepInfo::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Msg_TaskStepInfo::msg() const {
  // @@protoc_insertion_point(field_get:NetMsg.Msg_TaskStepInfo.msg)
  return msg_.GetNoArena();
}
inline void Msg_TaskStepInfo::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetMsg.Msg_TaskStepInfo.msg)
}
inline void Msg_TaskStepInfo::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetMsg.Msg_TaskStepInfo.msg)
}
inline void Msg_TaskStepInfo::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetMsg.Msg_TaskStepInfo.msg)
}
inline void Msg_TaskStepInfo::set_msg(const void* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetMsg.Msg_TaskStepInfo.msg)
}
inline std::string* Msg_TaskStepInfo::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:NetMsg.Msg_TaskStepInfo.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Msg_TaskStepInfo::release_msg() {
  // @@protoc_insertion_point(field_release:NetMsg.Msg_TaskStepInfo.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Msg_TaskStepInfo::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:NetMsg.Msg_TaskStepInfo.msg)
}

// -------------------------------------------------------------------

// Msg_TaskOver

// int32 reason = 1;
inline void Msg_TaskOver::clear_reason() {
  reason_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Msg_TaskOver::reason() const {
  // @@protoc_insertion_point(field_get:NetMsg.Msg_TaskOver.reason)
  return reason_;
}
inline void Msg_TaskOver::set_reason(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  reason_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.Msg_TaskOver.reason)
}

// int32 score = 2;
inline void Msg_TaskOver::clear_score() {
  score_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Msg_TaskOver::score() const {
  // @@protoc_insertion_point(field_get:NetMsg.Msg_TaskOver.score)
  return score_;
}
inline void Msg_TaskOver::set_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  score_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.Msg_TaskOver.score)
}

// -------------------------------------------------------------------

// Msg_E

// int32 year = 1;
inline void Msg_E::clear_year() {
  year_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Msg_E::year() const {
  // @@protoc_insertion_point(field_get:NetMsg.Msg_E.year)
  return year_;
}
inline void Msg_E::set_year(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  year_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.Msg_E.year)
}

// int32 month = 2;
inline void Msg_E::clear_month() {
  month_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Msg_E::month() const {
  // @@protoc_insertion_point(field_get:NetMsg.Msg_E.month)
  return month_;
}
inline void Msg_E::set_month(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  month_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.Msg_E.month)
}

// int32 day = 3;
inline void Msg_E::clear_day() {
  day_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Msg_E::day() const {
  // @@protoc_insertion_point(field_get:NetMsg.Msg_E.day)
  return day_;
}
inline void Msg_E::set_day(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  day_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.Msg_E.day)
}

// int32 hour = 4;
inline void Msg_E::clear_hour() {
  hour_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Msg_E::hour() const {
  // @@protoc_insertion_point(field_get:NetMsg.Msg_E.hour)
  return hour_;
}
inline void Msg_E::set_hour(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  hour_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.Msg_E.hour)
}

// int32 min = 5;
inline void Msg_E::clear_min() {
  min_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Msg_E::min() const {
  // @@protoc_insertion_point(field_get:NetMsg.Msg_E.min)
  return min_;
}
inline void Msg_E::set_min(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  min_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.Msg_E.min)
}

// int32 sec = 6;
inline void Msg_E::clear_sec() {
  sec_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Msg_E::sec() const {
  // @@protoc_insertion_point(field_get:NetMsg.Msg_E.sec)
  return sec_;
}
inline void Msg_E::set_sec(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sec_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.Msg_E.sec)
}

// bytes shellNum = 7;
inline void Msg_E::clear_shellnum() {
  shellnum_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Msg_E::shellnum() const {
  // @@protoc_insertion_point(field_get:NetMsg.Msg_E.shellNum)
  return shellnum_.GetNoArena();
}
inline void Msg_E::set_shellnum(const std::string& value) {
  
  shellnum_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetMsg.Msg_E.shellNum)
}
inline void Msg_E::set_shellnum(std::string&& value) {
  
  shellnum_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetMsg.Msg_E.shellNum)
}
inline void Msg_E::set_shellnum(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  shellnum_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetMsg.Msg_E.shellNum)
}
inline void Msg_E::set_shellnum(const void* value, size_t size) {
  
  shellnum_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetMsg.Msg_E.shellNum)
}
inline std::string* Msg_E::mutable_shellnum() {
  
  // @@protoc_insertion_point(field_mutable:NetMsg.Msg_E.shellNum)
  return shellnum_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Msg_E::release_shellnum() {
  // @@protoc_insertion_point(field_release:NetMsg.Msg_E.shellNum)
  
  return shellnum_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Msg_E::set_allocated_shellnum(std::string* shellnum) {
  if (shellnum != nullptr) {
    
  } else {
    
  }
  shellnum_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), shellnum);
  // @@protoc_insertion_point(field_set_allocated:NetMsg.Msg_E.shellNum)
}

// bool isSelfChkOrTestTxtSaved = 8;
inline void Msg_E::clear_isselfchkortesttxtsaved() {
  isselfchkortesttxtsaved_ = false;
}
inline bool Msg_E::isselfchkortesttxtsaved() const {
  // @@protoc_insertion_point(field_get:NetMsg.Msg_E.isSelfChkOrTestTxtSaved)
  return isselfchkortesttxtsaved_;
}
inline void Msg_E::set_isselfchkortesttxtsaved(bool value) {
  
  isselfchkortesttxtsaved_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.Msg_E.isSelfChkOrTestTxtSaved)
}

// -------------------------------------------------------------------

// Msg_F

// bytes FuzeTypeSelected = 1;
inline void Msg_F::clear_fuzetypeselected() {
  fuzetypeselected_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Msg_F::fuzetypeselected() const {
  // @@protoc_insertion_point(field_get:NetMsg.Msg_F.FuzeTypeSelected)
  return fuzetypeselected_.GetNoArena();
}
inline void Msg_F::set_fuzetypeselected(const std::string& value) {
  
  fuzetypeselected_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetMsg.Msg_F.FuzeTypeSelected)
}
inline void Msg_F::set_fuzetypeselected(std::string&& value) {
  
  fuzetypeselected_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetMsg.Msg_F.FuzeTypeSelected)
}
inline void Msg_F::set_fuzetypeselected(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fuzetypeselected_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetMsg.Msg_F.FuzeTypeSelected)
}
inline void Msg_F::set_fuzetypeselected(const void* value, size_t size) {
  
  fuzetypeselected_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetMsg.Msg_F.FuzeTypeSelected)
}
inline std::string* Msg_F::mutable_fuzetypeselected() {
  
  // @@protoc_insertion_point(field_mutable:NetMsg.Msg_F.FuzeTypeSelected)
  return fuzetypeselected_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Msg_F::release_fuzetypeselected() {
  // @@protoc_insertion_point(field_release:NetMsg.Msg_F.FuzeTypeSelected)
  
  return fuzetypeselected_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Msg_F::set_allocated_fuzetypeselected(std::string* fuzetypeselected) {
  if (fuzetypeselected != nullptr) {
    
  } else {
    
  }
  fuzetypeselected_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fuzetypeselected);
  // @@protoc_insertion_point(field_set_allocated:NetMsg.Msg_F.FuzeTypeSelected)
}

// bytes SerialNum = 2;
inline void Msg_F::clear_serialnum() {
  serialnum_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Msg_F::serialnum() const {
  // @@protoc_insertion_point(field_get:NetMsg.Msg_F.SerialNum)
  return serialnum_.GetNoArena();
}
inline void Msg_F::set_serialnum(const std::string& value) {
  
  serialnum_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetMsg.Msg_F.SerialNum)
}
inline void Msg_F::set_serialnum(std::string&& value) {
  
  serialnum_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetMsg.Msg_F.SerialNum)
}
inline void Msg_F::set_serialnum(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  serialnum_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetMsg.Msg_F.SerialNum)
}
inline void Msg_F::set_serialnum(const void* value, size_t size) {
  
  serialnum_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetMsg.Msg_F.SerialNum)
}
inline std::string* Msg_F::mutable_serialnum() {
  
  // @@protoc_insertion_point(field_mutable:NetMsg.Msg_F.SerialNum)
  return serialnum_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Msg_F::release_serialnum() {
  // @@protoc_insertion_point(field_release:NetMsg.Msg_F.SerialNum)
  
  return serialnum_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Msg_F::set_allocated_serialnum(std::string* serialnum) {
  if (serialnum != nullptr) {
    
  } else {
    
  }
  serialnum_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serialnum);
  // @@protoc_insertion_point(field_set_allocated:NetMsg.Msg_F.SerialNum)
}

// -------------------------------------------------------------------

// Msg_K

// bytes order = 1;
inline void Msg_K::clear_order() {
  order_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Msg_K::order() const {
  // @@protoc_insertion_point(field_get:NetMsg.Msg_K.order)
  return order_.GetNoArena();
}
inline void Msg_K::set_order(const std::string& value) {
  
  order_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetMsg.Msg_K.order)
}
inline void Msg_K::set_order(std::string&& value) {
  
  order_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetMsg.Msg_K.order)
}
inline void Msg_K::set_order(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  order_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetMsg.Msg_K.order)
}
inline void Msg_K::set_order(const void* value, size_t size) {
  
  order_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetMsg.Msg_K.order)
}
inline std::string* Msg_K::mutable_order() {
  
  // @@protoc_insertion_point(field_mutable:NetMsg.Msg_K.order)
  return order_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Msg_K::release_order() {
  // @@protoc_insertion_point(field_release:NetMsg.Msg_K.order)
  
  return order_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Msg_K::set_allocated_order(std::string* order) {
  if (order != nullptr) {
    
  } else {
    
  }
  order_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), order);
  // @@protoc_insertion_point(field_set_allocated:NetMsg.Msg_K.order)
}

// -------------------------------------------------------------------

// Msg_BD

// -------------------------------------------------------------------

// Msg_T_Online_Device

// int32 onlineflag = 1;
inline void Msg_T_Online_Device::clear_onlineflag() {
  onlineflag_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Msg_T_Online_Device::onlineflag() const {
  // @@protoc_insertion_point(field_get:NetMsg.Msg_T_Online_Device.onlineflag)
  return onlineflag_;
}
inline void Msg_T_Online_Device::set_onlineflag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  onlineflag_ = value;
  // @@protoc_insertion_point(field_set:NetMsg.Msg_T_Online_Device.onlineflag)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace NetMsg

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::NetMsg::MsgID> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetMsg::MsgID>() {
  return ::NetMsg::MsgID_descriptor();
}
template <> struct is_proto_enum< ::NetMsg::DCType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetMsg::DCType>() {
  return ::NetMsg::DCType_descriptor();
}
template <> struct is_proto_enum< ::NetMsg::SelfCheck20T> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetMsg::SelfCheck20T>() {
  return ::NetMsg::SelfCheck20T_descriptor();
}
template <> struct is_proto_enum< ::NetMsg::ItemTest20T> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetMsg::ItemTest20T>() {
  return ::NetMsg::ItemTest20T_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_T20_5fNetMsg_2eproto
